{"version":3,"file":"static/js/1127.5d966e76.chunk.js","mappings":"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","sources":["layouts/InputTracking/AddTenants.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { validations } from \"../../utils/validations\";\nimport Can, { check } from \"../../utils/rbac/Can\";\n\nimport Stack from \"@mui/material/Stack\";\nimport Typography from \"@mui/material/Typography\";\nimport Link from \"@mui/material/Link\";\nimport TextField from \"@mui/material/TextField\";\n\nimport CustomSelect from \"../../components/common/CustomSelect\";\nimport BreadCrumb from \"../../components/common/CustomBreadCrumbs\";\nimport Button from \"../../components/common/Button\";\n\nimport { addUser } from \"../../redux/actions/UserManagementActions\";\nimport { getRoles } from \"../../redux/actions/AppActions\";\nimport { getTenants } from \"../../redux/actions/TenantActions\";\n\n// import { notify } from \"../../utils/toastNotification\";\nimport { textFieldStyles } from \"../../components/Modals/globals\";\n\nfunction AddTenants() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [isAdding, setIsAdding] = useState(false);\n  const [roles, setRoles] = useState([]);\n\n  const authenticatedUser = useSelector(\n    (state) =>\n      state.AuthReducer.userProfile ||\n      JSON.parse(sessionStorage.getItem(\"user_profile\"))\n  );\n\n  const tenants = useSelector((state) => state.TenantReducer.tenants);\n\n  const dialogTextStyles = {\n    ...textFieldStyles,\n    width: {\n      ...textFieldStyles.width,\n      md: \"auto\",\n    },\n  };\n\n  useEffect(() => {\n    getRoles(\n      { filterByAuthority: true, authUser: authenticatedUser },\n      setRoles\n    );\n    if (\n      check({\n        role: authenticatedUser?.my_role?.role,\n        action: \"user:create:add-tenant-info\",\n      })\n    ) {\n      dispatch(getTenants({ page: 1 }));\n    }\n  }, [authenticatedUser, authenticatedUser?.my_role?.role, dispatch]);\n\n  const validationSchema = Yup.object({\n    first_name: validations\n      .name(\"First name\")\n      .required(\"First name is required\"),\n    last_name: validations.name(\"Last name\").required(\"Last name is required\"),\n    email: validations.email().required(\"Email is required\"),\n    password: validations.password(\"Password\").required(\"Password is required\"),\n    group: validations.blank().required(\"User group is required\"),\n    bvn: validations.bvn(\"BVN\"),\n  });\n\n  return (\n    <React.Fragment>\n      <section>\n        <nav id='quick-nav'>\n          <BreadCrumb\n            breadcrumbs={[\n              <Typography key='1' color='inherit'>\n                User Management\n              </Typography>,\n              <Link href='/user-management/users' key='2' color='inherit'>\n                Manage Users\n              </Link>,\n              <Typography key='3' color='primary.main'>\n                Add User\n              </Typography>,\n            ]}\n          />\n        </nav>\n\n        <Stack\n          direction='column'\n          px={4}\n          py={3}\n          alignItems='flex-start'\n          sx={{\n            backgroundColor: \"#FFF\",\n            boxShadow: \"0px 5px 20px rgba(108, 117, 125, 0.15)\",\n            borderRadius: \"5px\",\n          }}\n        >\n          <h3 className='first-text ml-1.5'>Add New Tenant</h3>\n          <Formik\n            initialValues={{\n              first_name: \"\",\n              last_name: \"\",\n              email: \"\",\n              password: \"\",\n              group: \"\",\n              bvn: \"\",\n              phone: \"\",\n              tenant: \"\",\n            }}\n            validationSchema={validationSchema}\n            onSubmit={async (values, { resetForm }) => {\n              const body = {\n                first_name: values.first_name,\n                last_name: values.last_name,\n                email: values.email,\n                password: values.password,\n                group: values.group,\n                tenant: values.tenant || \"TN-40\",\n                bvn: values.bvn,\n              };\n              // console.log(body);\n              setIsAdding(true);\n              const response = dispatch(addUser(body));\n\n              response.then((result) => {\n                console.log(result);\n                setIsAdding(false);\n                if (result?.data || result?.success) {\n                  resetForm();\n                  window.setTimeout(\n                    () => navigate(\"/user-management/users\"),\n                    1000\n                  );\n                }\n              });\n            }}\n          >\n            {({\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n            }) => (\n              <form\n                onSubmit={handleSubmit}\n                style={{ width: \"100%\", border: \"1px solid transparent\" }}\n              >\n                <Stack\n                  direction='row'\n                  justifyContent='space-between'\n                  sx={{\n                    flexWrap: {\n                      xs: \"wrap\",\n                      lg: \"nowrap\",\n                    },\n                  }}\n                >\n                  <Stack\n                    direction='column'\n                    sx={{\n                      mx: 1,\n                      width: \"100%\",\n                    }}\n                  >\n                    <label htmlFor='first_name' className='second-text my-3'>\n                      First Name <small className='text-red-500'>*</small>\n                    </label>\n                    <TextField\n                      id='first_name'\n                      sx={dialogTextStyles}\n                      name='first_name'\n                      InputProps={{ style: { height: \"44px\" } }}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      value={values.first_name}\n                      className={\n                        errors.first_name && touched.first_name\n                          ? \"input-error\"\n                          : null\n                      }\n                    />\n                    {errors.first_name && touched.first_name && (\n                      <span className='error'>{errors.first_name}</span>\n                    )}\n                  </Stack>\n                </Stack>\n\n                <Stack\n                  direction='row'\n                  justifyContent='space-between'\n                  sx={{\n                    flexWrap: {\n                      xs: \"wrap\",\n                      lg: \"nowrap\",\n                    },\n                  }}\n                >\n                  <Stack\n                    direction='column'\n                    sx={{\n                      mx: 1,\n                      width: \"100%\",\n                    }}\n                  >\n                    <label htmlFor='email' className='second-text my-3'>\n                      Email <small className='text-red-500'>*</small>\n                    </label>\n                    <TextField\n                      sx={dialogTextStyles}\n                      id='email'\n                      name='email'\n                      InputProps={{ style: { height: \"44px\" } }}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      value={values.email}\n                      className={\n                        errors.email && touched.email ? \"input-error\" : null\n                      }\n                    />\n                    {errors.email && touched.email && (\n                      <span className='error'>{errors.email}</span>\n                    )}\n                  </Stack>\n                </Stack>\n\n                <div className='buttons mt-8 ml-1.5'>\n                  <div className=''>\n                    <Button\n                      type='submit'\n                      value={isAdding ? \"Adding...\" : \"Submit\"}\n                      disabled={isAdding}\n                    />\n                  </div>\n                </div>\n              </form>\n            )}\n          </Formik>\n        </Stack>\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default AddTenants;\n"],"names":["dispatch","useDispatch","navigate","useNavigate","useState","isAdding","setIsAdding","setRoles","authenticatedUser","useSelector","state","AuthReducer","userProfile","JSON","parse","sessionStorage","getItem","dialogTextStyles","TenantReducer","tenants","textFieldStyles","width","md","useEffect","getRoles","filterByAuthority","authUser","check","role","my_role","action","getTenants","page","validationSchema","Yup","first_name","validations","required","last_name","email","password","group","bvn","id","breadcrumbs","color","href","direction","px","py","alignItems","sx","backgroundColor","boxShadow","borderRadius","className","initialValues","phone","tenant","onSubmit","values","resetForm","body","addUser","then","result","console","log","data","success","window","setTimeout","errors","touched","handleChange","handleBlur","handleSubmit","style","border","justifyContent","flexWrap","xs","lg","mx","htmlFor","name","InputProps","height","onChange","onBlur","value","type","disabled"],"sourceRoot":""}