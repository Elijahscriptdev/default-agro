{"version":3,"file":"static/js/9438.bcf4f524.chunk.js","mappings":"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","sources":["components/common/CustomSelect.jsx","components/common/StatusIndicator.jsx","components/common/CustomRadioGroup.jsx","layouts/userManagement/EditFarmer.jsx","utils/convertJSONToFormData.js","redux/actions/UserManagementActions.js","utils/validations.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select from \"@mui/material/Select\";\n\nexport default function CustomSelect(props) {\n  const {\n    onChange = (e) => {},\n    noneLabel,\n    options = [],\n    iconType,\n    sx = {},\n    backgroundColor = \"#FFFFFF\",\n    ...rest\n  } = props;\n  const [selectValue, setSelectValue] = useState(\"\");\n\n  const handleChange = (event) => {\n    setSelectValue(event.target.value);\n    onChange(event);\n  };\n\n  let iconStyle;\n\n  switch (true) {\n    case !!iconType && iconType === \"filled\":\n      iconStyle = {\n        \"& .MuiSelect-icon\": {\n          backgroundColor: \"primary.main\",\n          fill: \"white\",\n          height: \"100%\",\n          width: props.iconwidth || \"48px\",\n          top: 0,\n          right: 0,\n        },\n      };\n      break;\n\n    default:\n      iconStyle = {};\n      break;\n  }\n\n  return (\n    <FormControl\n      sx={{\n        borderRadius: \"5px\",\n        minWidth: 120,\n        width: props.width,\n        height: props.height,\n        backgroundColor: props.backgroundColor,\n      }}\n    >\n      <Select\n        value={selectValue}\n        onChange={handleChange}\n        displayEmpty\n        inputProps={{ \"aria-label\": \"Without label\" }}\n        // IconComponent=\"ArrowDropDownOutlined\"\n        sx={{\n          overflow: \"hidden\",\n          boxShadow: props.disableshadow\n            ? \"none\"\n            : \"0px 5px 20px rgba(108, 117, 125, 0.15)\",\n          \"& *\": {\n            border: \"none\",\n          },\n          ...iconStyle,\n          ...sx,\n        }}\n        {...rest}\n      >\n        <MenuItem value=\"\">{noneLabel || <em>None</em>}</MenuItem>\n        {options.map((option, index) => {\n          return (\n            <MenuItem\n              key={index}\n              value={option.value}\n              selected={option.selected}\n            >\n              {option.name || \"\"}\n            </MenuItem>\n          );\n        })}\n      </Select>\n    </FormControl>\n  );\n}\n","import React from \"react\";\n\nconst Status = (props) => {\n  const { value, type = \"pending\" } = props;\n\n  const wrapperStyle = {\n    boxSizing: \"border-box\",\n    width: \"auto\",\n    height: \"26px\",\n    padding: \"8px\",\n    borderRadius: \"13px\",\n    borderWidth: \"0.6px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  };\n\n  const textStyle = {\n    fontSize: \"12px\",\n    fontWeight: 600,\n    display: \"block\",\n  };\n\n  switch (type) {\n    case \"success\":\n      wrapperStyle.backgroundColor = \"#F6FFED\";\n      wrapperStyle.borderColor = \"#B7EB8F\";\n      textStyle.color = \"#52C41A\";\n      break;\n\n    case \"pending\":\n      wrapperStyle.backgroundColor = \"#FFF7E6\";\n      wrapperStyle.borderColor = \"#FA8C16\";\n      textStyle.color = \"#FA8C16\";\n      break;\n\n    case \"error\":\n      wrapperStyle.backgroundColor = \"#FFF1F0\";\n      wrapperStyle.borderColor = \"#F5222D\";\n      textStyle.color = \"#F5222D\";\n      break;\n\n    default:\n      wrapperStyle.backgroundColor = \"#FFF1F0\";\n      wrapperStyle.borderColor = \"#F5222D\";\n      textStyle.color = \"#F5222D\";\n      break;\n  }\n  return (\n    <div style={wrapperStyle}>\n      <span style={textStyle}>{value}</span>\n    </div>\n  );\n};\n\nexport default Status;\n\n// \"#FFF1F0\"\n// borderColor\n// \"#F5222D\"\n","import React, { useState } from \"react\";\n\nimport FormControl from \"@mui/material/FormControl\";\nimport Radio from \"@mui/material/Radio\";\nimport RadioGroup from \"@mui/material/RadioGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport FormLabel from \"@mui/material/FormLabel\";\n\nexport default function CustomRadioGroup(props) {\n  const {\n    id = \"\",\n    name = null,\n    formLabel = \"\",\n    formLabelProps = {},\n    onChange = (e) => {},\n    // noneLabel,\n    options = [],\n    // iconType,\n    sx = {},\n    ...rest\n  } = props;\n\n  // const handleChange = (event) => {\n  //   setSelectValue(event.target.value);\n  //   onChange(event);\n  // };\n\n  return (\n    <FormControl>\n      <FormLabel id={id} {...formLabelProps}>\n        {formLabel}\n      </FormLabel>\n      <RadioGroup\n        aria-labelledby={id}\n        name={name}\n        onChange={onChange}\n        {...rest}\n      >\n        {options.map((eachRadio, index) => {\n          return (\n            <FormControlLabel\n              key={index}\n              value={eachRadio.value}\n              control={<Radio />}\n              label={eachRadio.name}\n              {...(eachRadio.props || {})}\n            />\n          );\n        })}\n      </RadioGroup>\n    </FormControl>\n  );\n}\n","import React, { useState, useEffect, useMemo, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport Stack from \"@mui/material/Stack\";\nimport Typography from \"@mui/material/Typography\";\nimport Link from \"@mui/material/Link\";\nimport TextField from \"@mui/material/TextField\";\nimport IconButton from \"@mui/material/IconButton\";\n\nimport { BiEditAlt as EditIcon } from \"react-icons/bi\";\n\nimport CustomSelect from \"../../components/common/CustomSelect\";\nimport StatusIndicator from \"../../components/common/StatusIndicator\";\nimport Avatar from \"../../components/common/UserAvatar\";\nimport BreadCrumb from \"../../components/common/CustomBreadCrumbs\";\nimport Button from \"../../components/common/Button\";\nimport Table from \"../../components/Table/UserTable\";\nimport { validations } from \"../../utils/validations\";\n\nimport axiosServices from \"../../services/axiosServices\";\nimport { notify } from \"../../utils/toastNotification\";\nimport CustomRadioGroup from \"../../components/common/CustomRadioGroup\";\nimport { updateFarmer } from \"../../redux/actions/UserManagementActions\";\nimport { getLocalGovt, getStates } from \"../../redux/actions/AppActions\";\nimport { SET_LOCALS } from \"../../redux/types/AppActionTypes\";\nimport { getSingleFarmer } from \"../../redux/actions/UserManagementActions\";\n\nfunction EditFarmer() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const params = useParams();\n  let [farmer, setFarmer] = useState({});\n  let [isSubmitting, setIsSubmitting] = useState(false);\n  const [banks, setBanks] = useState([]);\n\n  const dialogTextStyles = {\n    backgroundColor: \"#FFF\",\n    width: \"100%\",\n    \"& fieldset\": {\n      border: \"0.5px solid rgba(108, 117, 125, 0.5)\",\n    },\n  };\n\n  const states = useSelector((state) => state.AppReducer.states);\n  const localGovts = useSelector((state) => state.AppReducer?.localGovt || []);\n\n  const stateChangeHandler = (handleChange) => (e) => {\n    // console.log({ state: e.target.value });\n    if (!e.target.value) {\n      dispatch({\n        type: SET_LOCALS,\n        payload: {\n          localGovt: [],\n        },\n      });\n    } else {\n      dispatch(getLocalGovt(e.target.value));\n    }\n    handleChange(e);\n  };\n\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"Farm ID\",\n        accessor: \"farm_id\",\n      },\n      {\n        Header: \"Crop\",\n        accessor: \"crop_name\",\n      },\n      {\n        Header: \"Edit\",\n        Cell: ({ value, row }) => {\n          const { original } = row;\n          // console.log(original);\n          return (\n            <IconButton href={`/user-management/edit-farmer/${original.id}`}>\n              <EditIcon />\n            </IconButton>\n          );\n        },\n      },\n    ],\n    []\n  );\n\n  const tableData = useMemo(\n    () => [\n      {\n        farm_id: \"FM-101210\",\n        crop_name: \"OPV-MAIZE\",\n      },\n    ],\n    []\n  );\n\n  const fetchBanks = useCallback(async () => {\n    try {\n      const bankRes = await axiosServices.get(\"/all/banks\");\n      // console.log(bankRes?.entity);\n      setBanks(bankRes?.result?.banks?.data || []);\n    } catch (error) {\n      console.log(error);\n      return error;\n    }\n  }, []);\n\n  useEffect(() => {\n    (async (farmerId) => {\n      // console.log({ farmerId });\n      try {\n        const response = await getSingleFarmer(farmerId);\n        if (response?.data) {\n          // console.log(response.data);\n          setFarmer(response.data);\n        } else {\n          notify(\"Failed to get farmer\", { type: \"error\" });\n        }\n      } catch (error) {\n        notify(error, { type: \"error\" });\n      }\n    })(params.farmerId);\n    dispatch(getStates({}));\n    fetchBanks();\n  }, [dispatch, fetchBanks, params.farmerId]);\n\n  const formValidationSchema = Yup.object({\n    first_name: validations\n      .name(\"First name\")\n      .required(\"First name is required\"),\n    last_name: validations.name(\"Last name\").required(\"Last name is required\"),\n    middle_name: validations.name(\"Middle name\"),\n    mobile: validations.mobile(\"Phone number\"),\n    dob: validations\n      .date(\"Date of birth\")\n      .required(\"Date of birth cannot be empty\"),\n    bvn: validations.bvn(\"BVN\"),\n    account_no: validations.blank().when(\"bank\", {\n      is: (bank) => !bank,\n      then: validations\n        .blank()\n        .matches(/[0-9]/g, \"Invalid account number\")\n        .min(10, \"Account number must atleast 10 digits\"),\n      otherwise: validations\n        .blank()\n        .matches(/[0-9]/g, \"Invalid account number\")\n        .min(10, \"Account number must atleast 10 digits\")\n        .required(\"Account number is required\"),\n    }),\n    home_state: validations.blank().required(\"State is required\"),\n    home_lga: validations.blank().required(\"LGA is required\"),\n    // account_no: validations\n    //   .blank()\n    //   .matches(/[0-9]/gi, \"Invalid Account Number\")\n    //   .length(10, \"Account number must be 10 digits long\"),\n  });\n\n  return (\n    <React.Fragment>\n      <section>\n        <nav id=\"quick-nav\">\n          <BreadCrumb\n            breadcrumbs={[\n              <Typography key=\"1\" color=\"inherit\">\n                User Management\n              </Typography>,\n              <Link href=\"/user-management/farmers\" key=\"2\" color=\"inherit\">\n                Manage Farmers\n              </Link>,\n              <Typography key=\"3\" color=\"primary.main\">\n                Edit Farmer\n              </Typography>,\n            ]}\n          />\n        </nav>\n\n        <Stack\n          direction=\"row\"\n          px={2}\n          py={3}\n          alignItems=\"flex-start\"\n          sx={{\n            flexWrap: {\n              xs: \"wrap\",\n              sm: \"no-wrap\",\n            },\n            backgroundColor: \"#FFF\",\n            boxShadow: \"0px 5px 20px rgba(108, 117, 125, 0.15)\",\n            borderRadius: \"5px\",\n          }}\n        >\n          <Stack\n            direction=\"column\"\n            alignItems=\"center\"\n            spacing={2}\n            sx={{\n              flexGrow: {\n                xs: 1,\n                md: 0,\n              },\n              mx: \"auto\",\n              minWidth: \"300px\",\n            }}\n          >\n            <Avatar\n              size=\"140px\"\n              fontSize=\"64px\"\n              firstname={farmer?.first_name}\n              lastname={farmer?.last_name}\n              avatarUrl={!farmer?.image ? \"\" : farmer?.image}\n              disableOutline=\"true\"\n            />\n            <StatusIndicator\n              value={farmer?.bvn_validate ? \"BVN Verified\" : \"BVN Not Verified\"}\n              type={farmer?.bvn_validate ? \"success\" : \"error\"}\n            />\n            <Stack direction=\"row\" alignItems=\"center\">\n              <span style={{ fontSize: \"15px\", marginRight: \"10px\" }}>\n                Input Confirmed:\n              </span>\n              <StatusIndicator\n                value={farmer?.input_confirmed ? \"Yes\" : \"No\"}\n                type={farmer?.input_confirmed ? \"success\" : \"error\"}\n              />\n            </Stack>\n\n            <Stack direction=\"column\" alignItems=\"center\">\n              <span style={{ fontWeight: 700 }}>Farms</span>\n              <Table\n                columns={columns}\n                data={tableData}\n                tableColor=\"white\"\n                sx={{\n                  boxShadow: \"4px 5px 20px rgba(108, 117, 125, 0.15)\",\n                }}\n              />\n            </Stack>\n          </Stack>\n\n          <Stack\n            sx={{\n              ml: {\n                xs: 0,\n                md: 4,\n              },\n              flexGrow: 1,\n            }}\n          >\n            <Formik\n              enableReinitialize={true}\n              initialValues={{\n                first_name: farmer?.first_name || \"\",\n                last_name: farmer?.last_name || \"\",\n                middle_name: farmer?.middle_name || \"\",\n                email: farmer?.email || \"\",\n                gender: farmer?.gender || \"\",\n                mobile: farmer?.mobile || \"\",\n                dob: farmer?.dob || \"\",\n                season: \"\",\n                status: farmer?.status || 0,\n                lead: farmer?.lead || false,\n                programme: farmer?.programme || \"\",\n                bank: farmer?.bank || \"\",\n                account_no: farmer?.account_no || \"\",\n                bvn: farmer?.bvn || \"\",\n                home_state: farmer?.home_state || \"\",\n                home_address: farmer?.home_address,\n                home_lga: farmer?.home_lga || \"\",\n              }}\n              validationSchema={formValidationSchema}\n              onSubmit={async (values, { resetForm }) => {\n                const body = {\n                  first_name: values.first_name,\n                  last_name: values.last_name,\n                  email: values.email,\n                  mobile: values.mobile,\n                  gender: values.gender,\n                  home_state: values.home_state,\n                  home_address: values.home_address,\n                  home_lga: values.home_lga,\n                  dob: values.dob,\n                  season: values.season,\n                  status: values.status,\n                  lead: values.lead,\n                  programme: values.programme,\n                  bank: values.bank,\n                  account_no: values.account_no,\n                  bvn: values.bvn,\n                };\n\n                console.log(body);\n                setIsSubmitting(true);\n                const response = dispatch(updateFarmer(params.farmerId, body));\n\n                response.then(() => {\n                  setIsSubmitting(false);\n                  resetForm();\n                  window.setTimeout(\n                    () => navigate(\"/user-management/farmers\"),\n                    1000\n                  );\n                });\n              }}\n            >\n              {({\n                values,\n                errors,\n                touched,\n                handleChange,\n                handleBlur,\n                handleSubmit,\n              }) => (\n                <form\n                  onSubmit={handleSubmit}\n                  className=\"flex flex-col\"\n                  style={{ flexGrow: 1 }}\n                >\n                  <Stack direction=\"row\" justifyContent=\"space-between\">\n                    <Stack\n                      direction=\"column\"\n                      flexGrow={1}\n                      sx={{\n                        mx: 1,\n                        width: \"100%\",\n                      }}\n                    >\n                      <label htmlFor=\"first_name\" className=\"second-text my-3\">\n                        First Name <small className=\"text-red-500\">*</small>\n                      </label>\n                      <TextField\n                        id=\"first_name\"\n                        sx={dialogTextStyles}\n                        name=\"first_name\"\n                        InputProps={{ style: { height: \"44px\" } }}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.first_name}\n                        className={\n                          errors.first_name && touched.first_name\n                            ? \"input-error\"\n                            : null\n                        }\n                      />\n                      {errors.first_name && touched.first_name && (\n                        <span className=\"error\">{errors.first_name}</span>\n                      )}\n                    </Stack>\n\n                    <Stack\n                      direction=\"column\"\n                      flexGrow={1}\n                      sx={{\n                        mx: 1,\n                        width: \"100%\",\n                      }}\n                    >\n                      <label htmlFor=\"last_name\" className=\"second-text my-3\">\n                        Last Name <small className=\"text-red-500\">*</small>\n                      </label>\n                      <TextField\n                        sx={dialogTextStyles}\n                        id=\"last_name\"\n                        name=\"last_name\"\n                        InputProps={{ style: { height: \"44px\" } }}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.last_name}\n                        className={\n                          errors.last_name && touched.last_name\n                            ? \"input-error\"\n                            : null\n                        }\n                      />\n                      {errors.last_name && touched.last_name && (\n                        <span className=\"error\">{errors.last_name}</span>\n                      )}\n                    </Stack>\n                  </Stack>\n\n                  <Stack direction=\"row\" justifyContent=\"space-between\">\n                    <Stack\n                      direction=\"column\"\n                      flexGrow={1}\n                      sx={{\n                        mx: 1,\n                        width: \"100%\",\n                      }}\n                    >\n                      <label htmlFor=\"middle_name\" className=\"second-text my-3\">\n                        Middle Name\n                      </label>\n                      <TextField\n                        id=\"middle_name\"\n                        sx={dialogTextStyles}\n                        name=\"middle_name\"\n                        InputProps={{ style: { height: \"44px\" } }}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.middle_name}\n                        className={\n                          errors.middle_name && touched.middle_name\n                            ? \"input-error\"\n                            : null\n                        }\n                      />\n                      {errors.middle_name && touched.middle_name && (\n                        <span className=\"error\">{errors.middle_name}</span>\n                      )}\n                    </Stack>\n\n                    <Stack\n                      direction=\"column\"\n                      flexGrow={1}\n                      sx={{\n                        mx: 1,\n                        width: \"100%\",\n                      }}\n                    >\n                      <label htmlFor=\"mobile\" className=\"second-text my-3\">\n                        Phone Number\n                      </label>\n                      <TextField\n                        sx={dialogTextStyles}\n                        id=\"mobile\"\n                        name=\"mobile\"\n                        InputProps={{ style: { height: \"44px\" } }}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.mobile}\n                        className={\n                          errors.mobile && touched.mobile ? \"input-error\" : null\n                        }\n                      />\n                      {errors.mobile && touched.mobile && (\n                        <span className=\"error\">{errors.mobile}</span>\n                      )}\n                    </Stack>\n                  </Stack>\n\n                  <Stack direction=\"row\" justifyContent=\"space-between\">\n                    <Stack\n                      direction=\"column\"\n                      flexGrow={1}\n                      sx={{\n                        mx: 1,\n                        width: \"100%\",\n                      }}\n                    >\n                      <label htmlFor=\"dob\" className=\"second-text my-3\">\n                        Date Of Birth <small className=\"text-red-500\">*</small>\n                      </label>\n                      <TextField\n                        id=\"dob\"\n                        sx={dialogTextStyles}\n                        name=\"dob\"\n                        type=\"date\"\n                        InputProps={{ style: { height: \"44px\" } }}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.dob}\n                        className={\n                          errors.dob && touched.dob ? \"input-error\" : null\n                        }\n                      />\n                      {errors.dob && touched.dob && (\n                        <span className=\"error\">{errors.dob}</span>\n                      )}\n                    </Stack>\n\n                    <Stack\n                      direction=\"column\"\n                      flexGrow={1}\n                      sx={{\n                        mx: 1,\n                        width: \"100%\",\n                      }}\n                    >\n                      <label htmlFor=\"gender\" className=\"second-text my-3\">\n                        Gender\n                      </label>\n                      <CustomSelect\n                        id=\"gender\"\n                        name=\"gender\"\n                        noneLabel={<em>Select Gender</em>}\n                        options={[\n                          { name: \"Male\", value: \"Male\" },\n                          { name: \"Female\", value: \"Female\" },\n                        ]}\n                        value={values.gender}\n                        iconType=\"filled\"\n                        width=\"100%\"\n                        height=\"44px\"\n                        sx={dialogTextStyles}\n                        backgroundColor=\"#F3F3F4\"\n                        disableshadow=\"true\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                      />\n                      {errors.gender && touched.gender && (\n                        <span className=\"error\">{errors.gender}</span>\n                      )}\n                    </Stack>\n                  </Stack>\n\n                  <Stack direction=\"row\" justifyContent=\"space-between\">\n                    <Stack\n                      direction=\"column\"\n                      flexGrow={1}\n                      sx={{\n                        mx: 1,\n                        width: \"100%\",\n                      }}\n                    >\n                      <label htmlFor=\"season\" className=\"second-text my-3\">\n                        Season\n                      </label>\n                      <TextField\n                        id=\"season\"\n                        sx={dialogTextStyles}\n                        name=\"season\"\n                        InputProps={{ style: { height: \"44px\" } }}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.season}\n                        className={\n                          errors.season && touched.season ? \"input-error\" : null\n                        }\n                      />\n                      {errors.season && touched.season && (\n                        <span className=\"error\">{errors.season}</span>\n                      )}\n                    </Stack>\n\n                    <Stack\n                      direction=\"column\"\n                      flexGrow={1}\n                      sx={{\n                        mx: 1,\n                        width: \"100%\",\n                      }}\n                    >\n                      <label htmlFor=\"programme\" className=\"second-text my-3\">\n                        Programme\n                      </label>\n                      <TextField\n                        id=\"programme\"\n                        sx={dialogTextStyles}\n                        name=\"programme\"\n                        InputProps={{ style: { height: \"44px\" } }}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.programme}\n                        className={\n                          errors.programme && touched.programme\n                            ? \"input-error\"\n                            : null\n                        }\n                      />\n                      {errors.programme && touched.programme && (\n                        <span className=\"error\">{errors.programme}</span>\n                      )}\n                    </Stack>\n                  </Stack>\n\n                  <Stack direction=\"row\" justifyContent=\"space-between\">\n                    <Stack\n                      direction=\"column\"\n                      flexGrow={1}\n                      sx={{\n                        mx: 1,\n                        width: \"100%\",\n                      }}\n                    >\n                      <label htmlFor=\"bank\" className=\"second-text my-3\">\n                        Bank\n                      </label>\n                      <CustomSelect\n                        name=\"bank\"\n                        id=\"bank\"\n                        value={values.bank}\n                        onChange={handleChange}\n                        noneLabel={<em>Select Bank</em>}\n                        iconType=\"filled\"\n                        width=\"100%\"\n                        height=\"44px\"\n                        sx={dialogTextStyles}\n                        backgroundColor=\"#F3F3F4\"\n                        disableshadow=\"true\"\n                        options={banks.map((bank) => ({\n                          name: bank.name,\n                          value: bank.name,\n                        }))}\n                      />\n                      {errors.bank && touched.bank && (\n                        <span className=\"error\">{errors.bank}</span>\n                      )}\n                    </Stack>\n\n                    <Stack\n                      direction=\"column\"\n                      flexGrow={1}\n                      sx={{\n                        mx: 1,\n                        width: \"100%\",\n                      }}\n                    >\n                      <label htmlFor=\"account_no\" className=\"second-text my-3\">\n                        Account Number\n                      </label>\n                      <TextField\n                        id=\"account_no\"\n                        sx={dialogTextStyles}\n                        name=\"account_no\"\n                        InputProps={{ style: { height: \"44px\" } }}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.account_no}\n                        className={\n                          errors.account_no && touched.account_no\n                            ? \"input-error\"\n                            : null\n                        }\n                      />\n                      {errors.account_no && touched.account_no && (\n                        <span className=\"error\">{errors.account_no}</span>\n                      )}\n                    </Stack>\n                  </Stack>\n\n                  <Stack direction=\"row\" justifyContent=\"space-between\">\n                    <Stack\n                      direction=\"column\"\n                      flexGrow={1}\n                      sx={{\n                        mx: 1,\n                        width: \"100%\",\n                      }}\n                    >\n                      <label htmlFor=\"bvn\" className=\"second-text my-3\">\n                        BVN\n                      </label>\n                      <TextField\n                        id=\"bvn\"\n                        sx={dialogTextStyles}\n                        name=\"bvn\"\n                        InputProps={{ style: { height: \"44px\" } }}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.bvn}\n                        className={\n                          errors.bvn && touched.bvn ? \"input-error\" : null\n                        }\n                      />\n                      {errors.bvn && touched.bvn && (\n                        <span className=\"error\">{errors.bvn}</span>\n                      )}\n                    </Stack>\n\n                    <Stack\n                      direction=\"column\"\n                      flexGrow={1}\n                      sx={{\n                        mx: 1,\n                        width: \"100%\",\n                      }}\n                    >\n                      <CustomRadioGroup\n                        row\n                        name=\"status\"\n                        id=\"status\"\n                        formLabel=\"Status\"\n                        formLabelProps={{\n                          htmlFor: \"status\",\n                          className: \"second-text my-3\",\n                        }}\n                        options={[\n                          { name: \"Active\", value: 1, props: { sx: {} } },\n                          {\n                            name: \"Inactive\",\n                            value: 0,\n                            props: { sx: {} },\n                          },\n                        ]}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.status}\n                      />\n                    </Stack>\n                  </Stack>\n\n                  <Stack\n                    direction=\"column\"\n                    flexGrow={1}\n                    sx={{\n                      mx: 1,\n                      width: \"100%\",\n                    }}\n                  >\n                    <CustomRadioGroup\n                      row\n                      name=\"lead\"\n                      id=\"lead\"\n                      formLabel=\"Lead\"\n                      formLabelProps={{\n                        htmlFor: \"lead\",\n                        className: \"second-text my-3\",\n                      }}\n                      options={[\n                        { name: \"Yes\", value: true, props: { sx: {} } },\n                        { name: \"No\", value: false, props: { sx: {} } },\n                      ]}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      value={values.lead}\n                    />\n                  </Stack>\n\n                  <h2\n                    style={{\n                      fontSize: \"20px\",\n                      fontWeight: 700,\n                      margin: \"2.5rem 8px 5px\",\n                    }}\n                  >\n                    Other Information\n                  </h2>\n\n                  <Stack direction=\"row\" justifyContent=\"space-between\">\n                    <Stack\n                      direction=\"column\"\n                      flexGrow={1}\n                      sx={{\n                        mx: 1,\n                        width: \"100%\",\n                      }}\n                    >\n                      <label htmlFor=\"loan\" className=\"second-text my-3\">\n                        Loan Amount\n                      </label>\n                      <TextField\n                        id=\"loan\"\n                        sx={dialogTextStyles}\n                        name=\"loan\"\n                        type=\"number\"\n                        InputProps={{ style: { height: \"44px\" } }}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.loan}\n                        className={\n                          errors.loan && touched.loan ? \"input-error\" : null\n                        }\n                      />\n                      {errors.loan && touched.loan && (\n                        <span className=\"error\">{errors.loan}</span>\n                      )}\n                    </Stack>\n                  </Stack>\n\n                  <Stack direction=\"row\" justifyContent=\"space-between\">\n                    <Stack\n                      direction=\"column\"\n                      flexGrow={1}\n                      sx={{\n                        mx: 1,\n                        width: \"100%\",\n                      }}\n                    >\n                      <label htmlFor=\"home_state\" className=\"second-text my-3\">\n                        State <small className=\"text-red-500\">*</small>\n                      </label>\n                      <CustomSelect\n                        id=\"home_state\"\n                        name=\"home_state\"\n                        noneLabel={<em>Select State</em>}\n                        options={Object.values(states).map((eachState) => ({\n                          name: eachState.name,\n                          value: eachState.state_id,\n                        }))}\n                        iconType=\"filled\"\n                        width=\"100%\"\n                        height=\"44px\"\n                        sx={dialogTextStyles}\n                        backgroundColor=\"#F3F3F4\"\n                        disableshadow=\"true\"\n                        onChange={stateChangeHandler(handleChange)}\n                        onBlur={handleBlur}\n                        className={\n                          errors.home_state && touched.home_state\n                            ? \"input-error\"\n                            : null\n                        }\n                      />\n                      {errors.home_state && touched.home_state && (\n                        <span className=\"error\">{errors.home_state}</span>\n                      )}\n                    </Stack>\n\n                    <Stack\n                      direction=\"column\"\n                      flexGrow={1}\n                      sx={{\n                        mx: 1,\n                        width: \"100%\",\n                      }}\n                    >\n                      <label htmlFor=\"home_lga\" className=\"second-text my-3\">\n                        L.G.A <small className=\"text-red-500\">*</small>\n                      </label>\n                      <CustomSelect\n                        id=\"home_lga\"\n                        name=\"home_lga\"\n                        noneLabel={<em>Select LGA</em>}\n                        options={localGovts.map((eachLga) => ({\n                          name: eachLga.local_name,\n                          value: eachLga.local_id,\n                        }))}\n                        iconType=\"filled\"\n                        width=\"100%\"\n                        height=\"44px\"\n                        sx={dialogTextStyles}\n                        backgroundColor=\"#F3F3F4\"\n                        disableshadow=\"true\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={\n                          errors.home_lga && touched.home_lga\n                            ? \"input-error\"\n                            : null\n                        }\n                      />\n                      {errors.home_lga && touched.home_lga && (\n                        <span className=\"error\">{errors.home_lga}</span>\n                      )}\n                    </Stack>\n                  </Stack>\n\n                  <Stack direction=\"row\" justifyContent=\"space-between\">\n                    <Stack\n                      direction=\"column\"\n                      flexGrow={1}\n                      sx={{\n                        mx: 1,\n                        width: \"100%\",\n                      }}\n                    >\n                      <label\n                        htmlFor=\"home_address\"\n                        className=\"second-text my-3\"\n                      >\n                        Home Address\n                      </label>\n                      <TextField\n                        id=\"home_address\"\n                        sx={dialogTextStyles}\n                        name=\"home_address\"\n                        multiline={true}\n                        InputProps={{ style: { height: \"64px\" } }}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.home_address}\n                        className={\n                          errors.home_address && touched.home_address\n                            ? \"input-error\"\n                            : null\n                        }\n                      />\n                      {errors.home_address && touched.home_address && (\n                        <span className=\"error\">{errors.home_address}</span>\n                      )}\n                    </Stack>\n                  </Stack>\n\n                  <div className=\"buttons mt-8\">\n                    <div className=\"mx-1.5\">\n                      <Button\n                        type=\"submit\"\n                        value={isSubmitting ? \"Updating Farmer...\" : \"Submit\"}\n                        disabled={\n                          Object.keys(farmer).length === 0 || isSubmitting\n                        }\n                      />\n                    </div>\n                  </div>\n                </form>\n              )}\n            </Formik>\n          </Stack>\n        </Stack>\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default EditFarmer;\n","export function convertToFormData(body = {}) {\n  const bodyFormData = new FormData();\n  if (Object.keys(body).length > 0) {\n    console.log({ body });\n    Object.keys(body).forEach((key) => {\n      bodyFormData.append(key, body[key]);\n    });\n  }\n  return bodyFormData;\n}","import axiosServices, { useAxiosService } from \"../../services/axiosServices\";\nimport { notify } from \"../../utils/toastNotification\";\nimport { errorHandler } from \"../../utils/actionsErrorHandler\";\nimport { createQuery } from \"../../utils/createQuery\";\nimport { convertToFormData } from \"../../utils/convertJSONToFormData\";\nimport {\n  GET_USERS_SUCCESS,\n  GET_USERS_FAIL,\n  ADD_USER_SUCCESS,\n  ADD_USER_FAIL,\n  LOADING_USERS,\n  GET_FARMERS_SUCCESS,\n  GET_FARMER_FAIL,\n  ADD_FARMER_SUCCESS,\n  ADD_FARMER_FAIL,\n  LOADING_FARMER,\n  GET_SOURCING_AGENTS_SUCCESS,\n  GET_SOURCING_AGENTS_FAIL,\n  ADD_SOURCING_AGENT_SUCCESS,\n  ADD_SOURCING_AGENT_FAIL,\n  LOADING_SOURCING_AGENTS,\n} from \"../types/UserManagementTypes\";\n\nexport const getUsers =\n  (queryParams = {}) =>\n  async (dispatch) => {\n    let page = queryParams.page || 1;\n    let limit = queryParams.limit || 10;\n    let query = createQuery(queryParams);\n    dispatch({ type: LOADING_USERS });\n    queryParams = createQuery(queryParams);\n    try {\n      const res = await axiosServices.get(\n        `/viewusers?page=${page}&limit=${limit}&query=${query}`\n      );\n      dispatch({\n        type: GET_USERS_SUCCESS,\n        payload: res,\n      });\n      // console.log(\"first data\", res?.data);\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: GET_USERS_FAIL,\n      });\n      errorHandler(error, \"Failed to fetch users\");\n      return error;\n    }\n  };\n\nexport const addUser = (data) => async (dispatch) => {\n  // dispatch({ type: LOADING_USERS, payload: true });\n  try {\n    const res = await axiosServices.post(`/users`, data);\n\n    if (res?.success && res?.result) {\n      notify(\"User added successfully\", { type: \"success\" });\n      dispatch({\n        type: ADD_USER_SUCCESS,\n        payload: res.result,\n      });\n      return res;\n      // dispatch(getUsers({ page: 1 }));\n    }\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: ADD_USER_FAIL,\n    });\n    errorHandler(error, \"Failed to add user\");\n    return error;\n  }\n};\n\nexport const bulkUploadUsers = (data) => async (dispatch) => {\n  try {\n    data = convertToFormData(data);\n\n    const res = await useAxiosService(\"formData\").post(\n      `/users/bulk-upload`,\n      data,\n      {}\n    );\n\n    // console.log(res);\n\n    if (res?.success && res?.result) {\n      notify(\"Users uploaded successfully\", { type: \"success\" });\n      dispatch(getUsers({ page: 1 }));\n    }\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to upload users\");\n    return error;\n  }\n};\n\nexport const updateUser = (userId, data) => async (dispatch) => {\n  // dispatch({ type: LOADING_USERS, payload: true });\n  try {\n    const res = await axiosServices.patch(`/users/${userId}`, data);\n\n    if (res?.success && res?.result) {\n      notify(\"User Updated successfully\", { type: \"success\" });\n      return res;\n    }\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to update user\");\n    return error;\n  }\n};\n\nexport const deleteUser = (userId) => async (dispatch) => {\n  try {\n    const res = await axiosServices.delete(`/users/${userId}`);\n    if (res) {\n      notify(\"User deleted successfully\", { type: \"success\" });\n      dispatch(getUsers({ page: 1 }));\n    }\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to delete user\");\n    return error;\n  }\n};\n\nexport const getFarmers =\n  (queryParams = {}) =>\n  async (dispatch) => {\n    dispatch({ type: LOADING_FARMER });\n    queryParams = createQuery(queryParams);\n    // console.log(queryParams);\n    try {\n      const res = await axiosServices.get(`/farmers${queryParams}`);\n\n      if (res?.success && res?.result) {\n        dispatch({\n          type: GET_FARMERS_SUCCESS,\n          payload: res?.result?.data,\n        });\n      } else {\n        dispatch({\n          type: GET_FARMER_FAIL,\n        });\n      }\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: GET_FARMER_FAIL,\n      });\n      errorHandler(error);\n      return error;\n    }\n  };\n\nexport const getSingleFarmer = async (farmerId) => {\n  try {\n    const res = await axiosServices.get(`/farmers/${farmerId}`);\n    return res?.result;\n  } catch (error) {\n    console.log(error);\n    return error;\n  }\n};\n\nexport const addFarmer = (data) => async (dispatch) => {\n  try {\n    const res = await axiosServices.post(`/farmers`, data);\n\n    if (res?.success && res?.result) {\n      notify(\"Farmer added successfully\", { type: \"success\" });\n      dispatch({\n        type: ADD_FARMER_SUCCESS,\n        payload: res.result,\n      });\n      dispatch(getFarmers({ page: 1 }));\n    }\n    return res;\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: ADD_FARMER_FAIL,\n    });\n    errorHandler(error, \"Failed to add farmer\");\n    return error;\n  }\n};\n\nexport const updateFarmer = (farmerId, data) => async (dispatch) => {\n  try {\n    const res = await axiosServices.patch(`/farmers/${farmerId}`, data);\n\n    if (res?.success && res?.result) {\n      notify(\"Farmer updated successfully\", { type: \"success\" });\n    }\n    return res;\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to update farmer\");\n    return error;\n  }\n};\n\nexport const bulkUploadFarmers = (data) => async (dispatch) => {\n  try {\n    data = convertToFormData(data);\n    const res = await useAxiosService(\"formData\")({\n      method: \"post\",\n      url: `/farmers/bulk-upload`,\n      data,\n    });\n\n    if (res?.success && res?.result) {\n      notify(\"Farmers uploaded successfully\", { type: \"success\" });\n      dispatch(getFarmers({ page: 1 }));\n    }\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to add farmer\");\n    return error;\n  }\n};\n\n//\nexport const exportFarmerData = (data, navigate) => async (dispatch) => {\n  try {\n    const res = await axiosServices.post(\n      `/farmers/downloads/process-farmer-details`,\n      data\n    );\n\n    if (res?.success && res?.result) {\n      notify(\"Farmers exported successfully\", { type: \"success\" });\n      navigate(\"/user-management/farmers/exports\");\n    }\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to export farmers\");\n    return error;\n  }\n};\n\nexport const getFarmerExports = async () => {\n  try {\n    const res = await axiosServices.get(`/farmers/downloads`);\n\n    if (res?.success && res?.result) {\n      return res?.result?.data;\n    }\n\n    return res;\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to fetch exports\");\n    return error;\n  }\n};\n\nexport const downloadFarmerTemplate = (data) => async (dispatch) => {\n  try {\n    const res = await axiosServices.get(`/templates/farmers`);\n\n    if (res?.success && res?.result) {\n    } else {\n      dispatch({\n        type: GET_FARMER_FAIL,\n      });\n    }\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: GET_FARMER_FAIL,\n    });\n    errorHandler(error);\n    return error;\n  }\n};\n\n// SOURCING AGENTS\nexport const getSourcingAgents =\n  (queryParams = {}) =>\n  async (dispatch) => {\n    dispatch({ type: LOADING_SOURCING_AGENTS });\n    queryParams = createQuery(queryParams);\n    try {\n      const res = await axiosServices.get(`/sourcing-partners${queryParams}`);\n      dispatch({\n        type: GET_SOURCING_AGENTS_SUCCESS,\n        payload: res?.result?.sourcing_partners,\n      });\n\n      // console.log(\"first\", res?.result?.data);\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: GET_SOURCING_AGENTS_FAIL,\n      });\n      errorHandler(error, \"Failed to fetch sourcing agents\");\n      return error;\n    }\n  };\n\nexport const addSourcingAgent = (data) => async (dispatch) => {\n  // dispatch({ type: LOADING_SOURCING_AGENTS, payload: true });\n  try {\n    const res = await axiosServices.post(`/sourcing-partners`, data);\n    console.log(res);\n    if (res?.success && res?.result) {\n      notify(\"Sourcing agent added successfully\", { type: \"success\" });\n      dispatch({\n        type: ADD_SOURCING_AGENT_SUCCESS,\n        payload: res.result,\n      });\n      // dispatch(getUsers({ page: 1 }));\n    }\n    return res;\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: ADD_SOURCING_AGENT_FAIL,\n    });\n    errorHandler(error, \"Failed to add sourcing agent\");\n    return error;\n  }\n};\n\nexport const updateSourcingAgent = (userId, data) => async (dispatch) => {\n  // dispatch({ type: LOADING_SOURCING_AGENTS, payload: true });\n  try {\n    const res = await axiosServices.patch(`/users/${userId}`, data);\n\n    if (res?.success && res?.result) {\n      notify(\"Sourcing agent updated successfully\", { type: \"success\" });\n      // dispatch(getUsers({ page: 1 }));\n    }\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to update sourcing agent\");\n    return error;\n  }\n};\n\nexport const deleteSourcingAgent = (userId) => async (dispatch) => {\n  try {\n    const res = await axiosServices.delete(`/sourcing-partners/${userId}`);\n    if (res) {\n      notify(\"Sourcing agent deleted successfully\", { type: \"success\" });\n      dispatch(getSourcingAgents({ page: 1 }));\n    }\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to delete sourcing agent\");\n    return error;\n  }\n};\n","import * as Yup from \"yup\";\n\nexport const validations = {\n  name: (paramName) =>\n    Yup.string().min(\n      3,\n      paramName\n        ? `${paramName} must be 3 or more characters`\n        : \"Must be 3 or more characters\"\n    ),\n  number: (paramName, min = -1e20, max = 1e20) =>\n    Yup.number()\n      .min(\n        min,\n        paramName\n          ? `${paramName} must be greater than ${min}`\n          : `Must be greater than ${min}`\n      )\n      .max(\n        max,\n        paramName\n          ? `${paramName} must be less than ${max}`\n          : `Must be less than ${max}`\n      ),\n  email: (paramName) => Yup.string().email(),\n  password: (paramName, min = 8, max = 24) =>\n    Yup.string()\n      .min(\n        min,\n        paramName\n          ? `${paramName} must be ${min} or more characters`\n          : \"Must be 8 or more characters\"\n      )\n      .max(max, paramName ? `${paramName} is too long` : \"Too long\"),\n  date: (paramName) =>\n    Yup.string().matches(\n      /(\\d{4}(-|\\/|\\\\)\\d{1,2}(-|\\/|\\\\)\\d{1,2})|(\\d{1,2}(-|\\/|\\\\)\\d{1,2}(-|\\/|\\\\)\\d{4})/gi\n    ),\n  mobile: (paramName) => Yup.string().matches(/[0-9)(+]/gi, \"Invalid number\"),\n  bvn: (paramName) =>\n    Yup.string()\n      .matches(/\\d{11}/g, \"Invalid BVN\")\n      .length(11, \"BVN must be 11 digits long\"),\n  blank: () => Yup.string(),\n};\n"],"names":["CustomSelect","props","iconStyle","onChange","e","noneLabel","options","iconType","sx","rest","backgroundColor","useState","selectValue","setSelectValue","fill","height","width","iconwidth","top","right","borderRadius","minWidth","value","event","target","displayEmpty","inputProps","overflow","boxShadow","disableshadow","border","map","option","index","selected","name","type","wrapperStyle","boxSizing","padding","borderWidth","display","justifyContent","alignItems","textStyle","fontSize","fontWeight","borderColor","color","style","CustomRadioGroup","id","formLabel","formLabelProps","FormControl","FormLabel","RadioGroup","eachRadio","FormControlLabel","control","Radio","label","dispatch","useDispatch","navigate","useNavigate","params","useParams","farmer","setFarmer","isSubmitting","setIsSubmitting","banks","setBanks","dialogTextStyles","states","useSelector","state","AppReducer","localGovts","localGovt","stateChangeHandler","handleChange","getLocalGovt","SET_LOCALS","payload","columns","useMemo","Header","accessor","Cell","original","row","IconButton","href","tableData","farm_id","crop_name","fetchBanks","useCallback","axiosServices","bankRes","result","data","console","log","useEffect","farmerId","getSingleFarmer","response","notify","getStates","formValidationSchema","Yup","first_name","validations","required","last_name","middle_name","mobile","dob","bvn","account_no","when","is","bank","then","matches","min","otherwise","home_state","home_lga","breadcrumbs","Typography","Link","Stack","direction","px","py","flexWrap","xs","sm","spacing","flexGrow","md","mx","size","firstname","lastname","avatarUrl","image","disableOutline","StatusIndicator","bvn_validate","marginRight","input_confirmed","tableColor","ml","enableReinitialize","initialValues","email","gender","season","status","lead","programme","home_address","validationSchema","onSubmit","values","resetForm","body","updateFarmer","window","setTimeout","errors","touched","handleBlur","handleSubmit","className","htmlFor","TextField","InputProps","onBlur","margin","loan","Object","eachState","state_id","eachLga","local_name","local_id","multiline","Button","disabled","keys","length","convertToFormData","bodyFormData","FormData","forEach","key","append","getUsers","queryParams","page","limit","query","createQuery","LOADING_USERS","res","GET_USERS_SUCCESS","GET_USERS_FAIL","errorHandler","addUser","success","ADD_USER_SUCCESS","ADD_USER_FAIL","bulkUploadUsers","useAxiosService","post","updateUser","userId","deleteUser","getFarmers","LOADING_FARMER","GET_FARMERS_SUCCESS","GET_FARMER_FAIL","addFarmer","ADD_FARMER_SUCCESS","ADD_FARMER_FAIL","bulkUploadFarmers","method","url","exportFarmerData","getFarmerExports","getSourcingAgents","LOADING_SOURCING_AGENTS","GET_SOURCING_AGENTS_SUCCESS","sourcing_partners","GET_SOURCING_AGENTS_FAIL","addSourcingAgent","ADD_SOURCING_AGENT_SUCCESS","ADD_SOURCING_AGENT_FAIL","deleteSourcingAgent","paramName","number","max","password","date","blank"],"sourceRoot":""}