{"version":3,"file":"static/js/1610.5336fbae.chunk.js","mappings":"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","sources":["redux/actions/ConfigurationsActions.js","redux/actions/FarmManagementActions.js"],"sourcesContent":["import axiosServices from '../../services/axiosServices';\nimport { notify } from \"../../utils/toastNotification\";\nimport { errorHandler } from \"../../utils/actionsErrorHandler\";\nimport { createQuery } from \"../../utils/createQuery\";\n\nimport {\n  GET_CROP_CALENDAR,\n  GET_CROP_CALENDAR_SUCCESS,\n  GET_CROP_CALENDAR_FAIL,\n  GET_CROP_PROFILE,\n  GET_CROP_PROFILE_SUCCESS,\n  GET_CROP_PROFILE_FAIL,\n  GET_FARM_SEASONS,\n  GET_FARM_SEASONS_SUCCESS,\n  GET_FARM_SEASONS_FAIL,\n  GET_ACTIVITY_CATEGORIES,\n  GET_ACTIVITY_CATEGORIES_SUCCESS,\n  GET_ACTIVITY_CATEGORIES_FAIL\n} from '../types/ConfigurationsTypes';\n\nexport const addCropProfile = (data) => async (dispatch) => {\n  try {\n    // dispatch({\n    //   type: GET_CROP_PROFILE,\n    // });\n\n    const response = await axiosServices.post(\"/config/crop-profile\", data);\n    // console.log(cropProfiles);\n    if (response) {\n      notify(\"Crop profile created\", { type: \"success\" });\n      dispatch(getCropProfiles());\n    } else {\n      notify(\"Failed\", { type: \"error\" });\n    }\n  } catch (error) {\n    // console.log(error);\n    errorHandler(error);\n    return error;\n  }\n}\n\nexport const updateCropProfile = (data) => async (dispatch) => {\n  try {\n    // dispatch({\n    //   type: GET_CROP_PROFILE,\n    // });\n\n    const response = await axiosServices.put(\"/config/crop-profile\", data);\n    // console.log(cropProfiles);\n    if (response) {\n      notify(\"Crop profile updated\", { type: \"success\" });\n      dispatch(getCropProfiles());\n    } else {\n      notify(\"Failed to update\", { type: \"error\" });\n    }\n  } catch (error) {\n    // console.log(error);\n    errorHandler(error);\n    return error;\n  }\n}\n\nexport const getCropProfiles = (queryParams = {}) => async (dispatch) => {\n  try {\n    dispatch({\n      type: GET_CROP_PROFILE,\n    });\n\n    const queryString = createQuery(queryParams);\n    const cropProfiles = await axiosServices.get(`/dashboard/crop-profiles${queryString}`);\n    // console.log(cropProfiles);\n\n    if (cropProfiles) {\n      dispatch({\n        type: GET_CROP_PROFILE_SUCCESS,\n        payload: cropProfiles\n      });\n    }\n  } catch (error) {\n    // console.log(error);\n    dispatch({\n      type: GET_CROP_PROFILE_FAIL\n    });\n    errorHandler(error);\n    return error;\n  }\n}\n\nexport const deleteCropProfile = (cropProfileId) => async (dispatch) => {\n  try {\n    // console.log(cropProfileId);\n    const response = await axiosServices.delete(`/config/crop-profile/${cropProfileId}`);\n\n    if (response && response.success) {\n      notify(\"Crop profile deleted\", { type: \"success\" });\n      dispatch(getCropProfiles());\n    } else {\n      notify(\"Failed to delete\", { type: \"error\" });\n    }\n  } catch (error) {\n    // console.log(error);\n    errorHandler(error);\n    return error;\n  }\n}\n\nexport const addNewCategory = (data) => async (dispatch) => {\n  try {\n    // dispatch({\n    //   type: GET_CROP_PROFILE,\n    // });\n\n    const response = await axiosServices.post(\"/config/category\", data);\n    // console.log(cropProfiles);\n    if (response) {\n      notify(\"Crop Category created\", { type: \"success\" });\n    } else {\n      notify(\"Failed\", { type: \"error\" });\n    }\n  } catch (error) {\n    // console.log(error);\n    errorHandler(error);\n    return error;\n  }\n}\n\nexport const getCropCalendar = (queryParams = {}) => async (dispatch) => {\n  try {\n    dispatch({\n      type: GET_CROP_CALENDAR,\n    });\n\n    const queryString = createQuery(queryParams);\n    const response = await axiosServices.get(`/config/activities/tasks${queryString}`);\n    // console.log(response);\n    const success = response.success;\n    const data = response.result?.data;\n\n    if (success && data) {\n      // console.log(data);\n      dispatch({\n        type: GET_CROP_CALENDAR_SUCCESS,\n        payload: data\n      });\n    } else {\n      dispatch({\n        type: GET_CROP_CALENDAR_FAIL\n      });\n      notify(response.message || 'An error occured', { type: \"error\" });\n    }\n  } catch (error) {\n    // console.log(error);\n    dispatch({\n      type: GET_CROP_CALENDAR_FAIL\n    });\n    errorHandler(error);\n    return error;\n  }\n}\n\nexport const addNewTask = (data) => async (dispatch) => {\n  try {\n    const response = await axiosServices.post(\"/config/task\", data);\n    // console.log(response);\n    if (response) {\n      notify(\"Task created\", { type: \"success\" });\n      dispatch(getCropCalendar());\n    } else {\n      notify(response.message || 'An error occured', { type: \"error\" });\n    }\n  } catch (error) {\n    // console.log(error);\n    errorHandler(error);\n    return error;\n  }\n}\n\nexport const deleteTask = (payload) => async (dispatch) => {\n  try {\n    const response = await axiosServices.delete(\"/config/task\", {\n      data: payload\n    });\n    // console.log(response);\n\n    if (response.success) {\n      notify('Task deleted successfully', { type: \"success\" });\n      dispatch(getCropCalendar());\n    } else {\n      notify(response.message || 'An error occured', { type: \"error\" });\n    }\n  } catch (error) {\n    errorHandler(error);\n    return error;\n  }\n}\n\nexport const getFarmSeassons = (queryParams = {}) => async (dispatch) => {\n  try {\n    dispatch({\n      type: GET_FARM_SEASONS,\n    });\n\n    const queryString = createQuery(queryParams);\n    const response = await axiosServices.get(`/config/seasons${queryString}`);\n    // console.log(response);\n    const success = response.success;\n    const data = response.result?.data?.data;\n\n    if (success && data) {\n      dispatch({\n        type: GET_FARM_SEASONS_SUCCESS,\n        payload: {\n          data,\n          total: response.result?.data?.total\n        }\n      });\n    } else {\n      dispatch({\n        type: GET_FARM_SEASONS_FAIL\n      });\n      notify(response.message || 'An error occured', { type: \"error\" });\n    }\n  } catch (error) {\n    // console.log(error);\n    dispatch({\n      type: GET_FARM_SEASONS_FAIL\n    });\n    errorHandler(error);\n    return error;\n  }\n}\n\nexport const addNewSeason = (data) => async (dispatch) => {\n  try {\n    const response = await axiosServices.post(\"/config/season\", data);\n    // console.log(response);\n    if (response) {\n      notify(\"Season created\", { type: \"success\" });\n      dispatch(getFarmSeassons());\n    } else {\n      notify(response.message || 'An error occured', { type: \"error\" });\n    }\n  } catch (error) {\n    errorHandler(error);\n    return error;\n  }\n}\n\nexport const toggleSeason = (data) => async (dispatch) => {\n  try {\n    const response = await axiosServices.put(\"/config/season\", data);\n    // console.log(response);\n    if (response) {\n      notify(\"Season updated successfully\", { type: \"success\" });\n      dispatch(getFarmSeassons());\n    } else {\n      notify(response.message || 'An error occured', { type: \"error\" });\n    }\n  } catch (error) {\n    errorHandler(error);\n    return error;\n  }\n}\n\nexport const getActivityCategories = (queryParams = {}) => async (dispatch) => {\n  try {\n    dispatch({\n      type: GET_ACTIVITY_CATEGORIES,\n    });\n\n    const queryString = createQuery(queryParams);\n    const response = await axiosServices.get(`/config/categories${queryString}`);\n    // console.log(response);\n    const success = response.success;\n    const data = response.result?.data;\n\n    if (success && data) {\n      dispatch({\n        type: GET_ACTIVITY_CATEGORIES_SUCCESS,\n        payload: {\n          data,\n          total: data?.length || 0\n        }\n      });\n    } else {\n      dispatch({\n        type: GET_ACTIVITY_CATEGORIES_FAIL\n      });\n      notify(response.message || 'An error occured', { type: \"error\" });\n    }\n  } catch (error) {\n    // console.log(error);\n    dispatch({\n      type: GET_ACTIVITY_CATEGORIES_FAIL\n    });\n    errorHandler(error);\n    return error;\n  }\n}","import axiosServices, { useAxiosService } from '../../services/axiosServices';\nimport { notify } from \"../../utils/toastNotification\";\nimport { createQuery } from \"../../utils/createQuery\";\nimport { errorHandler } from \"../../utils/actionsErrorHandler\";\n\nimport {\n  GET_CLUSTERS,\n  GET_CLUSTERS_SUCCESS,\n  GET_CLUSTERS_FAIL,\n  GET_SUB_CLUSTERS,\n  GET_SUB_CLUSTERS_SUCCESS,\n  GET_SUB_CLUSTERS_FAIL,\n  GET_FARM_LOTS,\n  GET_FARM_LOTS_SUCCESS,\n  GET_FARM_LOTS_FAIL\n} from '../types/FarmManagementTypes';\nimport { convertToFormData } from '../../utils/convertJSONToFormData';\n\nexport const getClusters = (queryParams = {}) => async (dispatch) => {\n  try {\n    dispatch({\n      type: GET_CLUSTERS,\n    });\n\n    const response = await axiosServices.get(\"/clusters\");\n    // console.log(cropProfiles);\n    const success = response.success;\n    const data = response.result?.clusters;\n\n    if (success && data) {\n      dispatch({\n        type: GET_CLUSTERS_SUCCESS,\n        payload: data\n      });\n    }\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: GET_CLUSTERS_FAIL\n    });\n    errorHandler(error);\n    return error;\n  }\n}\n\nexport const getSingleCluster = async (clusterId) => {\n  try {\n    const res = await axiosServices.get(`/clusters/${clusterId}`);\n    return res?.result?.cluster;\n  } catch (error) {\n    console.log(error);\n    return error;\n  }\n};\n\nexport const addCluster = (data) => async (dispatch) => {\n  try {\n    const response = await axiosServices.post(\"/clusters\", data);\n    console.log(response);\n    if (response) {\n      notify(\"Cluster created\", { type: \"success\" });\n      dispatch(getClusters({}));\n    } else {\n      notify(response.message || 'An error occured', { type: \"error\" });\n    }\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to add cluster\");\n    return error;\n  }\n}\n\nexport const updateCluster = (clusterId, data) => async (dispatch) => {\n  try {\n    const response = await axiosServices.patch(`/clusters/${clusterId}`, data);\n    console.log(response);\n    if (response) {\n      notify(\"Cluster updated\", { type: \"success\" });\n      dispatch(getClusters({}));\n    } else {\n      notify(response.message || 'An error occured', { type: \"error\" });\n    }\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to update cluster\");\n    return error;\n  }\n}\n\nexport const addSubCluster = (data) => async (dispatch) => {\n  try {\n    const response = await axiosServices.post(\"/sub-clusters\", data);\n    console.log(response);\n    if (response) {\n      notify(\"Sub-Cluster created\", { type: \"success\" });\n      dispatch(getSubClusters({}));\n    } else {\n      notify(response.message || 'An error occured', { type: \"error\" });\n    }\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to add subcluster\");\n    return error;\n  }\n}\n\nexport const updateSubcluster = (subClusterId, data) => async (dispatch) => {\n  try {\n    const response = await axiosServices.patch(`/sub-clusters/${subClusterId}`, data);\n    console.log(response);\n    if (response) {\n      notify(\"Sub-cluster updated\", { type: \"success\" });\n      dispatch(getSubClusters({}));\n    } else {\n      notify(response.message || 'An error occured', { type: \"error\" });\n    }\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to update sub-cluster\");\n    return error;\n  }\n}\n\nexport const getSubClusters = (queryParams = {}) => async (dispatch) => {\n  try {\n    dispatch({\n      type: GET_SUB_CLUSTERS,\n    });\n\n    const queryString = createQuery(queryParams);\n    const response = await axiosServices.get(`/sub-clusters${queryString}`);\n    // console.log(response);\n    const success = response.success;\n    const data = response?.result[\"sub-clusters\"];\n\n    if (success && data) {\n      dispatch({\n        type: GET_SUB_CLUSTERS_SUCCESS,\n        payload: data\n      });\n    } else {\n      dispatch({\n        type: GET_SUB_CLUSTERS_FAIL\n      });\n      notify(response.message || 'An error occured', { type: \"error\" });\n    }\n  } catch (error) {\n    // console.log(error);\n    dispatch({\n      type: GET_SUB_CLUSTERS_FAIL\n    });\n    errorHandler(error);\n    return error;\n  }\n}\n\nexport const getSingleSubCluster = async (subclusterId) => {\n  try {\n    const res = await axiosServices.get(`/sub-clusters/${subclusterId}`);\n    return res?.result[\"sub-cluster\"];\n  } catch (error) {\n    console.log(error);\n    return error;\n  }\n};\n\nexport const getFarmLots = (queryParams = {}) => async (dispatch) => {\n  try {\n    dispatch({\n      type: GET_FARM_LOTS,\n    });\n\n    const queryString = createQuery(queryParams);\n    console.log(queryString);\n    const response = await axiosServices.get(`/farms${queryString}`);\n    // console.log(response);\n    const success = response.success;\n    const data = response.result?.data?.data;\n\n    if (success && data) {\n      dispatch({\n        type: GET_FARM_LOTS_SUCCESS,\n        payload: {\n          data,\n          total: response.result.data.total\n        }\n      });\n    } else {\n      dispatch({\n        type: GET_FARM_LOTS_FAIL\n      });\n      notify(response.message || 'An error occured', { type: \"error\" });\n    }\n  } catch (error) {\n    // console.log(error);\n    dispatch({\n      type: GET_FARM_LOTS_FAIL\n    });\n    errorHandler(error);\n    return error;\n  }\n}\n\nexport const addFarmUnit = (data) => async (dispatch) => {\n  try {\n    const response = await axiosServices.post(\"/farms\", data);\n    console.log(response);\n    if (response) {\n      notify(\"Farm unit created\", { type: \"success\" });\n      dispatch(getFarmLots({}));\n    } else {\n      notify(response.message || 'An error occured', { type: \"error\" });\n    }\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to add farm unit\");\n    return error;\n  }\n}\n\nexport const updateFarmUnit = (farmId, data) => async (dispatch) => {\n  try {\n    const response = await axiosServices.patch(`/farms/${farmId}`, data);\n    console.log(response);\n    if (response) {\n      notify(\"Farm updated\", { type: \"success\" });\n      dispatch(getFarmLots({}));\n    } else {\n      notify(response.message || 'An error occured', { type: \"error\" });\n    }\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to update farm\");\n    return error;\n  }\n}\n\nexport const bulkAssignFarms = (data) => async (dispatch) => {\n  try {\n    const response = await axiosServices.patch(`/farms/bulk/assign`, data);\n    // console.log(response);\n    if (response?.success) {\n      notify(\"Farm assigned\", { type: \"success\" });\n      dispatch(getFarmLots({ page: 1 }));\n    } else {\n      notify(response.message || 'An error occured', { type: \"error\" });\n    }\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to assign farms\");\n    return error;\n  }\n}\n\nexport const bulkUploadFarms = (data) => async (dispatch) => {\n  try {\n    data = convertToFormData(data);\n    const res = await useAxiosService(\"formData\")({\n      method: \"post\",\n      url: `/farm/bulk-upload`,\n      data,\n    });\n\n    if (res?.success && res?.result) {\n      notify(\"Farms uploaded successfully\", { type: \"success\" });\n      dispatch(getFarmLots({ page: 1 }));\n    }\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to upload farms\");\n    return error;\n  }\n};"],"names":["addCropProfile","data","dispatch","axiosServices","notify","type","getCropProfiles","errorHandler","updateCropProfile","queryParams","GET_CROP_PROFILE","queryString","createQuery","cropProfiles","GET_CROP_PROFILE_SUCCESS","payload","GET_CROP_PROFILE_FAIL","deleteCropProfile","cropProfileId","response","success","addNewCategory","getCropCalendar","GET_CROP_CALENDAR","result","GET_CROP_CALENDAR_SUCCESS","GET_CROP_CALENDAR_FAIL","message","addNewTask","deleteTask","getFarmSeassons","GET_FARM_SEASONS","GET_FARM_SEASONS_SUCCESS","total","GET_FARM_SEASONS_FAIL","addNewSeason","toggleSeason","getActivityCategories","GET_ACTIVITY_CATEGORIES","GET_ACTIVITY_CATEGORIES_SUCCESS","length","GET_ACTIVITY_CATEGORIES_FAIL","getClusters","GET_CLUSTERS","clusters","GET_CLUSTERS_SUCCESS","console","log","GET_CLUSTERS_FAIL","getSingleCluster","clusterId","res","cluster","addCluster","updateCluster","addSubCluster","getSubClusters","updateSubcluster","subClusterId","GET_SUB_CLUSTERS","GET_SUB_CLUSTERS_SUCCESS","GET_SUB_CLUSTERS_FAIL","getSingleSubCluster","subclusterId","getFarmLots","GET_FARM_LOTS","GET_FARM_LOTS_SUCCESS","GET_FARM_LOTS_FAIL","addFarmUnit","updateFarmUnit","farmId","bulkAssignFarms","page"],"sourceRoot":""}