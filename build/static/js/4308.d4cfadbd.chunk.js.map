{"version":3,"file":"static/js/4308.d4cfadbd.chunk.js","mappings":"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","sources":["layouts/FarmManagement/ManageSubClusters.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport Typography from \"@mui/material/Typography\";\nimport Stack from \"@mui/material/Stack\";\nimport Box from \"@mui/material/Box\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Button from \"../../components/common/Button\";\n\nimport { BiEditAlt as EditIcon } from \"react-icons/bi\";\nimport { AiOutlineEye as ViewIcon } from \"react-icons/ai\";\n\nimport Spinner from \"../../components/Spinner\";\nimport Table from \"../../components/Table/UserTable\";\nimport TableControls from \"../../components/Table/TableControls\";\nimport BreadCrumb from \"../../components/common/CustomBreadCrumbs\";\n\nimport {\n  AddSubCluster as AddSubClusterModalContent,\n  EditSubCluster as EditSubClusterModalContent,\n} from \"./ModalContents\";\nimport Dialog from \"../../components/Modals/Dialog\";\n\nimport { getSubClusters } from \"../../redux/actions/FarmManagementActions\";\nimport axiosServices from \"../../services/axiosServices\";\nimport Can from \"../../utils/rbac/Can\";\n// import { Tooltip } from \"@mui/material\";\n\nfunction ManageSubClusters() {\n  const navigate = useNavigate();\n\n  const subClusters = useSelector(\n    (state) => state.FarmMangementReducer.subClusters?.data\n  );\n\n  const isLoading = useSelector(\n    (state) => state.FarmMangementReducer.subClusters?.loading || false\n  );\n\n  const authenticatedUser = useSelector(\n    (state) =>\n      state.AuthReducer.userProfile ||\n      JSON.parse(sessionStorage.getItem(\"user_profile\"))\n  );\n\n  const [dialogContent, setDialogContent] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n  const [page, setPage] = useState(1);\n  const [limit, setLimit] = useState(subClusters.length);\n  const [roles, setRoles] = useState({});\n\n  const handleModalClose = () => {\n    setShowModal(false);\n  };\n\n  const handleModalOpen = useCallback(\n    (modalId, data = null) =>\n      (e) => {\n        switch (modalId) {\n          case \"add-sub-cluster\":\n            // console.log(data);\n            setDialogContent(\n              <AddSubClusterModalContent\n                closeHandler={handleModalClose}\n                roles={roles}\n              />\n            );\n            break;\n\n          case \"edit-sub-cluster\":\n            setDialogContent(\n              <EditSubClusterModalContent\n                closeHandler={handleModalClose}\n                data={data}\n                roles={roles}\n              />\n            );\n            break;\n\n          default:\n            setDialogContent(null);\n            break;\n        }\n        setShowModal(true);\n      },\n    [roles]\n  );\n\n  // onChange function for select\n  const handleLimitChange = (e) => {\n    setLimit(parseInt(e.target.value));\n  };\n\n  const setPrev = () => {\n    if (page > 1) setPage(page - 1);\n  };\n\n  const setNext = () => {\n    setPage(page + 1);\n  };\n\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"S/N\",\n        accessor: \"serial\",\n      },\n      {\n        Header: \"Name\",\n        accessor: \"name\",\n      },\n      {\n        Header: \"Description\",\n        accessor: \"description\",\n      },\n      {\n        Header: \"Agent\",\n        Cell: ({ value, row }) => {\n          const { original } = row;\n          return (\n            <span>{`${original.agent?.first_name} ${original.agent?.last_name}`}</span>\n          );\n        },\n      },\n      {\n        Header: \"Cluster ID\",\n        accessor: \"cluster\",\n      },\n      {\n        Header: \"Cluster Size\",\n        Cell: ({ value, row }) => {\n          const { original } = row;\n          return (\n            <span>\n              {!original.farms_sum_size ? \"-\" : `${original.farms_sum_size}`}\n            </span>\n          );\n        },\n      },\n      {\n        Header: \"View\",\n        Cell: ({ value, row }) => {\n          const { original } = row;\n          // console.log(original);\n          return (\n            <IconButton\n              onClick={() => {\n                navigate(`/farm-management/sub-clusters/${original.id}`);\n              }}\n            >\n              <ViewIcon />\n            </IconButton>\n          );\n        },\n      },\n      {\n        Header: \"Edit\",\n        Cell: ({ value, row }) => {\n          const { original } = row;\n          // console.log(original);\n          return (\n            <Can\n              role={authenticatedUser?.my_role?.role}\n              perform=\"farm-management:sub-cluster:edit\"\n              yes={() => (\n                <IconButton\n                  onClick={handleModalOpen(\"edit-sub-cluster\", original)}\n                >\n                  <EditIcon />\n                </IconButton>\n              )}\n              no={() => (\n                null\n                // <Tooltip\n                //   title={`${authenticatedUser?.my_role?.role} cannot perform this action`}\n                // >\n                //   <IconButton>\n                //     <EditIcon />\n                //   </IconButton>\n                // </Tooltip>\n              )}\n            />\n          );\n        },\n      },\n    ],\n    [authenticatedUser?.my_role?.role, handleModalOpen, navigate]\n  );\n\n  const tableData = useMemo(() => (subClusters || []).map((each, index) => {\n    return {\n      ...each,\n      serial: index + page\n    }\n  }), [subClusters, page]);\n\n  const fetchRoles = useCallback(async () => {\n    try {\n      // console.log(\"fetching roles\");\n      const res = await axiosServices.get(\"/all/roles\");\n      if (res?.result?.roles) {\n        setRoles((state) => {\n          const r = {};\n\n          res?.result?.roles.forEach((role) => {\n            r[role.role] = role.id;\n          });\n\n          return r;\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    fetchRoles();\n    dispatch(getSubClusters());\n  }, [dispatch, fetchRoles]);\n\n  return (\n    <React.Fragment>\n      <section>\n        <nav id=\"quick-nav\">\n          <BreadCrumb\n            breadcrumbs={[\n              <Typography key=\"1\" color=\"inherit\">\n                Farm Management\n              </Typography>,\n              <Typography key=\"2\" color=\"primary.main\">\n                Manage Sub Clusters\n              </Typography>,\n            ]}\n          />\n        </nav>\n\n        <Stack\n          direction=\"row\"\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n        >\n          <h2 className=\"with-spinner\" style={{ fontSize: \"20px\" }}>\n            <span>All Sub Clusters</span>\n            {isLoading ? <Spinner size={20} color=\"primary\" /> : \"\"}\n          </h2>\n          <Stack direction=\"row\">\n            <Can\n              role={authenticatedUser?.my_role?.role}\n              perform=\"farm-management:sub-cluster:create\"\n              yes={() => (\n                <Button\n                  onClick={handleModalOpen(\"add-sub-cluster\")}\n                  value=\"Add New Sub-Cluster\"\n                  disableElevation\n                />\n              )}\n              no={() => null}\n            />\n          </Stack>\n        </Stack>\n\n        <Box>\n          <Table columns={columns} data={tableData} isLoading={isLoading} />\n          <TableControls\n            nextHandler={() => setNext()}\n            prevHandler={() => setPrev()}\n            limitHandler={(e) => handleLimitChange(e)}\n            totalRecords={subClusters.length}\n            limit={subClusters.length || limit}\n            page={page}\n          />\n        </Box>\n      </section>\n      <Dialog open={showModal} closeHandler={handleModalClose}>\n        {dialogContent}\n      </Dialog>\n    </React.Fragment>\n  );\n}\n\nexport default ManageSubClusters;\n"],"names":["navigate","useNavigate","subClusters","useSelector","state","FarmMangementReducer","data","isLoading","loading","authenticatedUser","AuthReducer","userProfile","JSON","parse","sessionStorage","getItem","useState","dialogContent","setDialogContent","showModal","setShowModal","page","setPage","length","limit","setLimit","roles","setRoles","handleModalClose","handleModalOpen","useCallback","modalId","e","closeHandler","columns","useMemo","Header","accessor","Cell","value","original","row","agent","first_name","last_name","farms_sum_size","onClick","id","role","my_role","perform","yes","no","tableData","map","each","index","serial","fetchRoles","axiosServices","res","result","r","forEach","console","log","dispatch","useDispatch","useEffect","getSubClusters","breadcrumbs","color","direction","justifyContent","alignItems","className","style","fontSize","size","disableElevation","nextHandler","prevHandler","limitHandler","parseInt","target","handleLimitChange","totalRecords","open"],"sourceRoot":""}