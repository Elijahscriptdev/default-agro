{"version":3,"file":"static/js/5497.46f0a53a.chunk.js","mappings":"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","sources":["layouts/FarmManagement/ModalContents/index.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport Box from \"@mui/material/Box\";\nimport Stack from \"@mui/material/Stack\";\nimport TextField from \"@mui/material/TextField\";\nimport DialogActions from \"@mui/material/DialogActions\";\n\nimport CustomSelect from \"../../../components/common/CustomSelect\";\nimport Button from \"../../../components/common/Button\";\nimport DialogHeader from \"../../../components/Modals/DialogHeader\";\n\nimport {\n  textFieldStyles,\n  dialogContentStyles,\n} from \"../../../components/Modals/globals\";\n\nimport {\n  addCluster,\n  addFarmUnit,\n  addSubCluster,\n  updateSubcluster,\n  updateCluster,\n  bulkUploadFarms,\n  getClusters,\n  bulkAssignFarms,\n  getSubClusters,\n} from \"../../../redux/actions/FarmManagementActions\";\nimport { getFarmers } from \"../../../redux/actions/UserManagementActions\";\nimport { getCropProfiles } from \"../../../redux/actions/ConfigurationsActions\";\n\nimport { SET_LOCALS } from \"../../../redux/types/AppActionTypes\";\nimport { getLocalGovt } from \"../../../redux/actions/AppActions\";\nimport { validations } from \"../../../utils/validations\";\n\nimport FarmUploadTemplate from \"../../../data/downloads/USER UPLOAD SAMPLE.xlsx\";\nimport axiosServices from \"../../../services/axiosServices\";\nimport { Chip } from \"@mui/material\";\n\nexport const AddCluster = ({ closeHandler, roles }) => {\n  const dispatch = useDispatch();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const formValidationSchema = Yup.object({\n    name: validations.name(\"Cluster name\").required(\"Cluster name is required\"),\n    manager: validations.blank().required(\"Select a manager\"),\n  });\n\n  const [managers, setManagers] = useState([]);\n\n  const fetchManagers = useCallback(async () => {\n    try {\n      const managerRes = await axiosServices.get(\n        `/users?user_role=${roles[\"Project Manager\"]}`\n      );\n      // console.log(\"1\");\n      setManagers(managerRes?.result?.data?.data || []);\n    } catch (error) {\n      console.log(error);\n      return error;\n    }\n  }, [roles]);\n\n  useEffect(() => {\n    fetchManagers();\n  }, [fetchManagers]);\n\n  return (\n    <Box sx={dialogContentStyles}>\n      <DialogHeader title={\"Add Cluster\"} closeHandler={closeHandler} />\n      <Formik\n        initialValues={{\n          name: \"\",\n          manager: \"\",\n          description: \"\",\n        }}\n        validationSchema={formValidationSchema}\n        onSubmit={async (values, { resetForm }) => {\n          const body = {\n            name: values.name,\n            manager: values.manager,\n            description: values.description,\n          };\n          console.log(body);\n\n          setIsSubmitting(true);\n          const response = dispatch(addCluster(body));\n          response.then(() => {\n            setIsSubmitting(false);\n            resetForm();\n            closeHandler();\n          });\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <Stack direction=\"column\">\n              <label htmlFor=\"name\" className=\"second-text mb-4 mt-6\">\n                Cluster Name <small className=\"text-red-500\">*</small>\n              </label>\n              <TextField\n                sx={textFieldStyles}\n                InputProps={{ style: { height: \"44px\" } }}\n                id=\"name\"\n                name=\"name\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.name}\n                className={errors.name && touched.name ? \"input-error\" : null}\n              />\n              {errors.name && touched.name && (\n                <span className=\"error\">{errors.name}</span>\n              )}\n            </Stack>\n\n            <Stack direction=\"column\">\n              <label htmlFor=\"manager\" className=\"second-text my-4\">\n                Project Manager <small className=\"text-red-500\">*</small>\n              </label>\n              <CustomSelect\n                id=\"manager\"\n                name=\"manager\"\n                value={values.manager}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                noneLabel={<em>Select Manager</em>}\n                iconType=\"filled\"\n                width={textFieldStyles.width}\n                height=\"44px\"\n                sx={textFieldStyles}\n                backgroundColor=\"#F3F3F4\"\n                disableshadow=\"true\"\n                iconwidth=\"48px\"\n                options={managers.map((eachManager) => {\n                  return {\n                    value: eachManager.id,\n                    name: `${eachManager.first_name} ${eachManager.last_name}`,\n                  };\n                })}\n                className={\n                  errors.manager && touched.manager ? \"input-error\" : null\n                }\n              />\n              {errors.manager && touched.manager && (\n                <span className=\"error\">{errors.manager}</span>\n              )}\n            </Stack>\n\n            <Stack direction=\"column\">\n              <label htmlFor=\"description\" className=\"second-text mb-4 mt-6\">\n                Cluster Description\n              </label>\n              <TextField\n                id=\"description\"\n                name=\"description\"\n                sx={textFieldStyles}\n                InputProps={{ style: { height: \"44px\" } }}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.description}\n                className={\n                  errors.description && touched.description\n                    ? \"input-error\"\n                    : null\n                }\n              />\n            </Stack>\n\n            <DialogActions>\n              <div className=\"buttons mt-8\">\n                <div className=\"\">\n                  <Button\n                    value=\"Cancel\"\n                    onClick={closeHandler}\n                    sx={{\n                      fontSize: \"14px\",\n                      color: \"#A9A9A9\",\n                      backgroundColor: \"white\",\n                      borderRadius: \"5px\",\n                    }}\n                  />\n                </div>\n                <div className=\"mx-6\">\n                  <Button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    value={isSubmitting ? \"Adding...\" : \"Submit\"}\n                    sx={{\n                      fontSize: \"14px\",\n                      borderRadius: \"5px\",\n                    }}\n                  />\n                </div>\n              </div>\n            </DialogActions>\n          </form>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n\nexport const EditCluster = ({ closeHandler, data, roles }) => {\n  const dispatch = useDispatch();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  // console.log(data);\n\n  const formValidationSchema = Yup.object({\n    name: validations.name(\"Cluster name\").required(\"Cluster name is required\"),\n    manager: validations.blank().required(\"Select a manager\"),\n  });\n\n  const [managers, setManagers] = useState([]);\n\n  const fetchManagers = useCallback(async () => {\n    try {\n      const managerRes = await axiosServices.get(\n        `/users?user_role=${roles[\"Project Manager\"]}`\n      );\n      // console.log(\"1\");\n      setManagers(managerRes?.result?.data?.data || []);\n    } catch (error) {\n      console.log(error);\n      return error;\n    }\n  }, [roles]);\n\n  useEffect(() => {\n    fetchManagers();\n  }, [fetchManagers]);\n\n  return (\n    <Box sx={dialogContentStyles}>\n      <DialogHeader title={\"Edit Cluster\"} closeHandler={closeHandler} />\n      <Formik\n        initialValues={{\n          name: data.name || \"\",\n          manager: `${data.manager?.id}` || \"\",\n          description: data.description || \"\",\n        }}\n        validationSchema={formValidationSchema}\n        onSubmit={async (values, { resetForm }) => {\n          const body = {\n            name: values.name,\n            manager: values.manager,\n            description: values.description,\n          };\n          console.log(body);\n\n          setIsSubmitting(true);\n          const response = dispatch(updateCluster(data.id, body));\n          response.then(() => {\n            setIsSubmitting(false);\n            resetForm();\n            closeHandler();\n          });\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <Stack direction=\"column\">\n              <label htmlFor=\"name\" className=\"second-text mb-4 mt-6\">\n                Cluster Name\n              </label>\n              <TextField\n                InputProps={{ style: { height: \"44px\" } }}\n                placeholder=\"Kaduna State Cluster\"\n                sx={textFieldStyles}\n                id=\"name\"\n                name=\"name\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.name}\n                className={errors.name && touched.name ? \"input-error\" : null}\n              />\n            </Stack>\n\n            <Stack direction=\"column\">\n              <label htmlFor=\"manager\" className=\"second-text my-4\">\n                Project Manager\n              </label>\n              <CustomSelect\n                name=\"manager\"\n                value={values.manager}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                noneLabel={<em>Select Manager</em>}\n                iconType=\"filled\"\n                iconwidth=\"48px\"\n                height=\"44px\"\n                sx={{ backgroundColor: \"grey\" }}\n                backgroundColor=\"#F3F3F4\"\n                disableshadow=\"true\"\n                width={{ md: \"478px\", xs: \"100%\" }}\n                options={managers.map((eachManager) => {\n                  return {\n                    value: eachManager.id,\n                    name: `${eachManager.first_name} ${eachManager.last_name}`,\n                  };\n                })}\n                className={\n                  errors.manager && touched.manager ? \"input-error\" : null\n                }\n              />\n            </Stack>\n\n            <Stack direction=\"column\">\n              <label htmlFor=\"description\" className=\"second-text mb-4 mt-6\">\n                Cluster Description\n              </label>\n              <TextField\n                sx={textFieldStyles}\n                InputProps={{ style: { height: \"44px\" } }}\n                placeholder=\"All Farmers & Agents In Kaduna State\"\n                id=\"description\"\n                name=\"description\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.description}\n                className={\n                  errors.description && touched.description\n                    ? \"input-error\"\n                    : null\n                }\n              />\n              {errors.description && touched.description && (\n                <span className=\"error\">{errors.description}</span>\n              )}\n            </Stack>\n\n            <DialogActions>\n              <div className=\"buttons mt-8\">\n                <div className=\"\">\n                  <Button\n                    value=\"Cancel\"\n                    onClick={closeHandler}\n                    sx={{\n                      fontSize: \"14px\",\n                      color: \"#A9A9A9\",\n                      backgroundColor: \"white\",\n                      borderRadius: \"5px\",\n                    }}\n                  />\n                </div>\n                <div className=\"mx-6\">\n                  <Button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    value={isSubmitting ? \"Updating...\" : \"Submit\"}\n                    sx={{\n                      fontSize: \"14px\",\n                      borderRadius: \"5px\",\n                    }}\n                  />\n                </div>\n              </div>\n            </DialogActions>\n          </form>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n\nexport const AddSubCluster = ({ closeHandler, roles }) => {\n  const dispatch = useDispatch();\n\n  const [agents, setAgents] = useState([]);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const clusters = useSelector(\n    (state) => state.FarmMangementReducer?.clusters?.data || []\n  );\n\n  const fetchAgents = useCallback(async () => {\n    try {\n      const agentRes = await axiosServices.get(\n        `/users?user_role=${roles[\"Agent\"]}`\n      );\n      // console.log(roles[\"Agent\"]);\n      setAgents(agentRes?.result?.data?.data || []);\n    } catch (error) {\n      console.log(error);\n      return error;\n    }\n  }, [roles]);\n\n  const formValidationSchema = Yup.object({\n    name: validations.name(\"Cluster name\").required(\"Cluster name is required\"),\n    cluster: validations.blank().required(\"Select a cluster\"),\n    agent: validations.blank().required(\"Select an agent\"),\n  });\n\n  useEffect(() => {\n    dispatch(getClusters({ page: 1 }));\n    fetchAgents();\n  }, [fetchAgents, dispatch]);\n\n  return (\n    <Box sx={dialogContentStyles}>\n      <DialogHeader title={\"Add Sub Cluster\"} closeHandler={closeHandler} />\n      <Formik\n        initialValues={{\n          name: \"\",\n          agent: \"\",\n          description: \"\",\n          cluster: \"\",\n        }}\n        validationSchema={formValidationSchema}\n        onSubmit={async (values, { resetForm }) => {\n          const body = {\n            name: values.name,\n            agent: values.agent,\n            description: values.description,\n            cluster: values.cluster,\n          };\n          console.log(body);\n\n          setIsSubmitting(true);\n          const response = dispatch(addSubCluster(body));\n          response.then(() => {\n            setIsSubmitting(false);\n            resetForm();\n            closeHandler();\n          });\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <Stack direction=\"column\">\n              <label htmlFor=\"name\" className=\"second-text mb-4 mt-6\">\n                Sub Cluster Name <small className=\"text-red-500\">*</small>\n              </label>\n              <TextField\n                sx={textFieldStyles}\n                InputProps={{ style: { height: \"44px\" } }}\n                id=\"name\"\n                name=\"name\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.name}\n                className={errors.name && touched.name ? \"input-error\" : null}\n              />\n              {errors.name && touched.name && (\n                <span className=\"error\">{errors.name}</span>\n              )}\n            </Stack>\n\n            <Stack direction=\"column\">\n              <label htmlFor=\"agent\" className=\"second-text my-4\">\n                Agent <small className=\"text-red-500\">*</small>\n              </label>\n              <CustomSelect\n                id=\"agent\"\n                name=\"agent\"\n                value={values.agent}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                noneLabel={<em>Select an agent</em>}\n                options={agents.map((eachAgent) => {\n                  return {\n                    value: eachAgent.id,\n                    name: `${eachAgent.first_name} ${eachAgent.last_name}`,\n                  };\n                })}\n                iconType=\"filled\"\n                width={textFieldStyles.width}\n                disableshadow=\"true\"\n                height=\"44px\"\n                backgroundColor=\"#F3F3F4\"\n                iconwidth=\"48px\"\n                className={errors.agent && touched.agent ? \"input-error\" : null}\n              />\n              {errors.agent && touched.agent && (\n                <span className=\"error\">{errors.agent}</span>\n              )}\n            </Stack>\n\n            <Stack direction=\"column\">\n              <label htmlFor=\"description\" className=\"second-text mb-4 mt-6\">\n                Sub Cluster Description\n              </label>\n              <TextField\n                sx={textFieldStyles}\n                InputProps={{ style: { height: \"44px\" } }}\n                id=\"description\"\n                name=\"description\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.description}\n                className={\n                  errors.description && touched.description\n                    ? \"input-error\"\n                    : null\n                }\n              />\n              {errors.description && touched.description && (\n                <span className=\"error\">{errors.description}</span>\n              )}\n            </Stack>\n\n            <Stack direction=\"column\">\n              <label htmlFor=\"cluster\" className=\"second-text mb-4 mt-6\">\n                Cluster <small className=\"text-red-500\">*</small>\n              </label>\n              <CustomSelect\n                name=\"cluster\"\n                value={values.cluster}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                noneLabel={<em>Select Cluster</em>}\n                options={clusters.map((eachCluster) => {\n                  return {\n                    value: eachCluster.id,\n                    name: eachCluster.name,\n                  };\n                })}\n                iconType=\"filled\"\n                width={textFieldStyles.width}\n                height=\"44px\"\n                backgroundColor=\"#F3F3F4\"\n                iconwidth=\"48px\"\n                disableshadow=\"true\"\n                className={\n                  errors.cluster && touched.cluster ? \"input-error\" : null\n                }\n              />\n              {errors.cluster && touched.cluster && (\n                <span className=\"error\">{errors.cluster}</span>\n              )}\n            </Stack>\n\n            <DialogActions>\n              <div className=\"buttons mt-8\">\n                <div className=\"\">\n                  <Button\n                    value=\"Cancel\"\n                    onClick={closeHandler}\n                    sx={{\n                      fontSize: \"14px\",\n                      color: \"#A9A9A9\",\n                      backgroundColor: \"white\",\n                      borderRadius: \"5px\",\n                    }}\n                  />\n                </div>\n                <div className=\"mx-6\">\n                  <Button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    value={isSubmitting ? \"Adding...\" : \"Submit\"}\n                    sx={{\n                      fontSize: \"14px\",\n                      borderRadius: \"5px\",\n                    }}\n                  />\n                </div>\n              </div>\n            </DialogActions>\n          </form>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n\nexport const EditSubCluster = ({ closeHandler, data, roles }) => {\n  const dispatch = useDispatch();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const formValidationSchema = Yup.object({\n    name: validations.name(\"Cluster name\").required(\"Cluster name is required\"),\n    cluster: validations.blank().required(\"Select a cluster\"),\n    agent: validations.blank().required(\"Select an agent\"),\n  });\n\n  const [agents, setAgents] = useState([]);\n\n  const clusters = useSelector(\n    (state) => state.FarmMangementReducer?.clusters?.data || []\n  );\n\n  const fetchAgents = useCallback(async () => {\n    try {\n      const agentRes = await axiosServices.get(\n        `/users?user_role=${roles[\"Agent\"]}`\n      );\n      // console.log(roles[\"Agent\"]);\n      // console.log(clusters);\n      setAgents(agentRes?.result?.data?.data || []);\n    } catch (error) {\n      console.log(error);\n      return error;\n    }\n  }, [roles]);\n\n  useEffect(() => {\n    dispatch(getClusters({ page: 1 }));\n    fetchAgents();\n  }, [dispatch, fetchAgents]);\n\n  return (\n    <Box sx={dialogContentStyles}>\n      <DialogHeader title={\"Edit Sub Cluster\"} closeHandler={closeHandler} />\n      <Formik\n        initialValues={{\n          name: data.name || \"\",\n          agent: data.agent?.id || \"\",\n          description: data.description || \"\",\n          cluster: data.cluster || \"\",\n        }}\n        validationSchema={formValidationSchema}\n        onSubmit={async (values, { resetForm }) => {\n          const body = {\n            name: values.name,\n            agent: values.agent,\n            description: values.description,\n            cluster: values.cluster,\n          };\n          console.log(body);\n\n          setIsSubmitting(true);\n          const response = dispatch(updateSubcluster(data.id, body));\n          response.then(() => {\n            setIsSubmitting(false);\n            resetForm();\n            closeHandler();\n          });\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <Stack direction=\"column\">\n              <label htmlFor=\"name\" className=\"second-text mb-4 mt-6\">\n                Sub Cluster Name\n              </label>\n              <TextField\n                sx={textFieldStyles}\n                InputProps={{ style: { height: \"44px\" } }}\n                id=\"name\"\n                name=\"name\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.name}\n                className={errors.name && touched.name ? \"input-error\" : null}\n              />\n              {errors.name && touched.name && (\n                <span className=\"error\">{errors.name}</span>\n              )}\n            </Stack>\n\n            <Stack direction=\"column\">\n              <label htmlFor=\"agent\" className=\"second-text my-4\">\n                Agent\n              </label>\n              <CustomSelect\n                id=\"agent\"\n                name=\"agent\"\n                value={values.agent}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                noneLabel={<em>Select an agent</em>}\n                options={agents.map((eachAgent) => {\n                  return {\n                    value: eachAgent.id,\n                    name: `${eachAgent.first_name} ${eachAgent.last_name}`,\n                  };\n                })}\n                iconType=\"filled\"\n                width={textFieldStyles.width}\n                disableshadow=\"true\"\n                height=\"44px\"\n                backgroundColor=\"#F3F3F4\"\n                iconwidth=\"48px\"\n                className={errors.agent && touched.agent ? \"input-error\" : null}\n              />\n              {errors.agent && touched.agent && (\n                <span className=\"error\">{errors.agent}</span>\n              )}\n            </Stack>\n\n            <Stack direction=\"column\">\n              <label htmlFor=\"description\" className=\"second-text mb-4 mt-6\">\n                Sub Cluster Description\n              </label>\n              <TextField\n                sx={textFieldStyles}\n                InputProps={{ style: { height: \"44px\" } }}\n                id=\"description\"\n                name=\"description\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.description}\n                className={\n                  errors.description && touched.description\n                    ? \"input-error\"\n                    : null\n                }\n              />\n              {errors.description && touched.description && (\n                <span className=\"error\">{errors.description}</span>\n              )}\n            </Stack>\n\n            <Stack direction=\"column\">\n              <label htmlFor=\"cluster\" className=\"second-text mb-4 mt-6\">\n                Cluster\n              </label>\n              <CustomSelect\n                name=\"cluster\"\n                value={values.cluster}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                noneLabel={<em>Select Cluster</em>}\n                options={clusters.map((eachCluster) => {\n                  return {\n                    value: eachCluster.id,\n                    name: eachCluster.name,\n                  };\n                })}\n                // options={[{ name: \"Cluster 1\", value: \"1\" }]}\n                iconType=\"filled\"\n                width={textFieldStyles.width}\n                height=\"44px\"\n                backgroundColor=\"#F3F3F4\"\n                iconwidth=\"48px\"\n                disableshadow=\"true\"\n                className={\n                  errors.cluster && touched.cluster ? \"input-error\" : null\n                }\n              />\n              {errors.cluster && touched.cluster && (\n                <span className=\"error\">{errors.cluster}</span>\n              )}\n            </Stack>\n\n            <DialogActions>\n              <div className=\"buttons mt-8\">\n                <div className=\"\">\n                  <Button\n                    value=\"Cancel\"\n                    onClick={closeHandler}\n                    sx={{\n                      fontSize: \"14px\",\n                      color: \"#A9A9A9\",\n                      backgroundColor: \"white\",\n                      borderRadius: \"5px\",\n                    }}\n                  />\n                </div>\n                <div className=\"mx-6\">\n                  <Button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    value={isSubmitting ? \"Updating...\" : \"Submit\"}\n                    sx={{\n                      fontSize: \"14px\",\n                      borderRadius: \"5px\",\n                    }}\n                  />\n                </div>\n              </div>\n            </DialogActions>\n          </form>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n\nexport const AddFarmUnit = ({ closeHandler, states }) => {\n  const dispatch = useDispatch();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const localGovts = useSelector((state) => state.AppReducer?.localGovt || []);\n  const farmers = useSelector(\n    (state) => state.UserManagementReducer?.farmers || {}\n  );\n  const cropProfiles = useSelector(\n    (state) => state.ConfigReducer?.cropProfiles || {}\n  );\n\n  const stateChangeHandler = (handleChange) => (e) => {\n    // console.log({ state: e.target.value });\n    if (!e.target.value) {\n      dispatch({\n        type: SET_LOCALS,\n        payload: {\n          localGovt: [],\n        },\n      });\n    } else {\n      dispatch(getLocalGovt(e.target.value));\n    }\n    handleChange(e);\n  };\n\n  useEffect(() => {\n    dispatch(getFarmers({ page: 1 }));\n    dispatch(getCropProfiles());\n  }, [dispatch]);\n\n  const validationSchema = Yup.object({\n    state: validations.blank().required(\"State is required\"),\n    address: validations.blank().required(\"Address is required\"),\n    community: validations.blank().required(\"Local govt is required\"),\n    crop: validations.blank().required(\"Crop is required\"),\n    farmer: validations.blank().required(\"Farmer is required\"),\n  });\n\n  return (\n    <Box sx={dialogContentStyles}>\n      <DialogHeader title={\"Add Farm Unit\"} closeHandler={closeHandler} />\n      <Formik\n        initialValues={{\n          state: \"\",\n          community: \"\",\n          address: \"\",\n          size: 0,\n          clay: 0,\n          slit: 0,\n          loam: 0,\n          nitrogen: 0,\n          phosphorus: 0,\n          potassium: 0,\n          crop: \"\",\n          farmer: \"\",\n        }}\n        validationSchema={validationSchema}\n        onSubmit={async (values, { resetForm }) => {\n          const body = {\n            state: values.state,\n            community: values.community,\n            address: values.address,\n            size: values.size,\n            crop: values.crop,\n            clay: values.clay,\n            slit: values.slit,\n            loam: values.loam,\n            nitrogen: values.nitrogen,\n            phosphorus: values.phosphorus,\n            potassium: values.potassium,\n            farmer: values.farmer,\n          };\n          console.log(body);\n          // dispatch(addSubCluster(body));\n\n          setIsSubmitting(true);\n          const response = dispatch(addFarmUnit(body));\n          response.then(() => {\n            setIsSubmitting(false);\n            resetForm();\n            closeHandler();\n          });\n          // resetForm();\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <Stack direction=\"row\" alignItems=\"center\">\n              <Stack direction=\"column\" flexGrow={1} className=\"mr-14\">\n                <label htmlFor=\"state\" className=\"second-text mb-4 mt-6 \">\n                  State <small className=\"text-red-500\">*</small>\n                </label>\n                <CustomSelect\n                  id=\"state\"\n                  name=\"state\"\n                  value={values.state}\n                  onChange={stateChangeHandler(handleChange)}\n                  onBlur={handleBlur}\n                  noneLabel={<em>Select State</em>}\n                  options={states}\n                  iconType=\"filled\"\n                  width=\"33.125vw\"\n                  height=\"44px\"\n                  sx={{ backgroundColor: \"grey\" }}\n                  backgroundColor=\"#F3F3F4\"\n                  iconwidth=\"48px\"\n                  disableshadow=\"true\"\n                  className={\n                    errors.state && touched.state ? \"input-error\" : null\n                  }\n                />\n                {errors.state && touched.state && (\n                  <span className=\"error\">{errors.state}</span>\n                )}\n              </Stack>\n\n              <Stack direction=\"column\" flexGrow={1}>\n                <label htmlFor=\"community\" className=\"second-text mb-4 mt-6\">\n                  LGA <small className=\"text-red-500\">*</small>\n                </label>\n                <CustomSelect\n                  id=\"community\"\n                  name=\"community\"\n                  value={values.community}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  noneLabel={<em>Select LGA</em>}\n                  options={localGovts.map((eachLga) => ({\n                    name: eachLga.local_name,\n                    value: eachLga.local_id,\n                  }))}\n                  iconType=\"filled\"\n                  width=\"33.125vw\"\n                  height=\"44px\"\n                  sx={{ backgroundColor: \"grey\" }}\n                  backgroundColor=\"#F3F3F4\"\n                  iconwidth=\"48px\"\n                  disableshadow=\"true\"\n                  className={\n                    errors.community && touched.community ? \"input-error\" : null\n                  }\n                />\n                {errors.community && touched.community && (\n                  <span className=\"error\">{errors.community}</span>\n                )}\n              </Stack>\n            </Stack>\n\n            <Stack direction=\"column\">\n              <label htmlFor=\"address\" className=\"second-text mb-4 mt-4\">\n                Address <small className=\"text-red-500\">*</small>\n              </label>\n              <TextField\n                id=\"address\"\n                name=\"address\"\n                value={values.address}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                sx={{ backgroundColor: \"#F3F3F4\", width: \"100%\" }}\n                InputProps={{ style: { height: \"44px\" } }}\n                className={\n                  errors.address && touched.address ? \"input-error\" : null\n                }\n              />\n              {errors.address && touched.address && (\n                <span className=\"error\">{errors.address}</span>\n              )}\n            </Stack>\n\n            <Stack direction=\"row\" alignItems=\"center\">\n              <Stack direction=\"column\" flexGrow={1} className=\"mr-14\">\n                <label htmlFor=\"clay\" className=\"second-text mb-4 mt-4\">\n                  Soil Profile (Clay) %\n                </label>\n                <TextField\n                  id=\"clay\"\n                  name=\"clay\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.clay}\n                  type=\"number\"\n                  sx={{ backgroundColor: \"#F3F3F4\", width: \"100%\" }}\n                  InputProps={{ style: { height: \"44px\" } }}\n                  className={errors.clay && touched.clay ? \"input-error\" : null}\n                />\n                {errors.clay && touched.clay && (\n                  <span className=\"error\">{errors.clay}</span>\n                )}\n              </Stack>\n\n              <Stack direction=\"column\" flexGrow={1}>\n                <label htmlFor=\"phosphorus\" className=\"second-text mb-4 mt-4\">\n                  Phosphorus ( mg/L)\n                </label>\n                <TextField\n                  id=\"phosphorus\"\n                  name=\"phosphorus\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.phosphorus}\n                  type=\"number\"\n                  sx={{ backgroundColor: \"#F3F3F4\", width: \"100%\" }}\n                  InputProps={{ style: { height: \"44px\" } }}\n                  className={\n                    errors.phosphorus && touched.phosphorus\n                      ? \"input-error\"\n                      : null\n                  }\n                />\n                {errors.phosphorus && touched.phosphorus && (\n                  <span className=\"error\">{errors.phosphorus}</span>\n                )}\n              </Stack>\n            </Stack>\n\n            <Stack direction=\"row\" alignItems=\"center\">\n              <Stack direction=\"column\" flexGrow={1} className=\"mr-14\">\n                <label htmlFor=\"loam\" className=\"second-text mb-4 mt-4\">\n                  Soil Profile (Loam) %\n                </label>\n                <TextField\n                  id=\"loam\"\n                  name=\"loam\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.loam}\n                  type=\"number\"\n                  sx={{ backgroundColor: \"#F3F3F4\", width: \"100%\" }}\n                  InputProps={{ style: { height: \"44px\" } }}\n                  className={errors.loam && touched.loam ? \"input-error\" : null}\n                />\n                {errors.loam && touched.loam && (\n                  <span className=\"error\">{errors.loam}</span>\n                )}\n              </Stack>\n\n              <Stack direction=\"column\" flexGrow={1}>\n                <label htmlFor=\"nitrogen\" className=\"second-text mb-4 mt-4\">\n                  Nitrogen (mg/L)\n                </label>\n                <TextField\n                  id=\"nitrogen\"\n                  name=\"nitrogen\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.nitrogen}\n                  type=\"number\"\n                  sx={{ backgroundColor: \"#F3F3F4\", width: \"100%\" }}\n                  InputProps={{ style: { height: \"44px\" } }}\n                  className={\n                    errors.nitrogen && touched.nitrogen ? \"input-error\" : null\n                  }\n                />\n                {errors.nitrogen && touched.nitrogen && (\n                  <span className=\"error\">{errors.nitrogen}</span>\n                )}\n              </Stack>\n            </Stack>\n\n            <Stack direction=\"row\" alignItems=\"center\">\n              <Stack direction=\"column\" flexGrow={1} className=\"mr-14\">\n                <label htmlFor=\"slit\" className=\"second-text mb-4 mt-4\">\n                  Soil Profile (Slit) %\n                </label>\n                <TextField\n                  id=\"slit\"\n                  name=\"slit\"\n                  value={values.slit}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  type=\"number\"\n                  sx={{ backgroundColor: \"#F3F3F4\", width: \"100%\" }}\n                  InputProps={{ style: { height: \"44px\" } }}\n                  className={errors.slit && touched.slit ? \"input-error\" : null}\n                />\n                {errors.slit && touched.slit && (\n                  <span className=\"error\">{errors.slit}</span>\n                )}\n              </Stack>\n\n              <Stack direction=\"column\" flexGrow={1}>\n                <label htmlFor=\"potassium\" className=\"second-text mb-4 mt-4\">\n                  Potassium (mg/L)\n                </label>\n                <TextField\n                  id=\"potassium\"\n                  name=\"potassium\"\n                  value={values.potassium}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  type=\"number\"\n                  sx={{ backgroundColor: \"#F3F3F4\", width: \"100%\" }}\n                  InputProps={{ style: { height: \"44px\" } }}\n                  className={\n                    errors.potassium && touched.potassium ? \"input-error\" : null\n                  }\n                />\n                {errors.potassium && touched.potassium && (\n                  <span className=\"error\">{errors.potassium}</span>\n                )}\n              </Stack>\n            </Stack>\n\n            <Stack direction=\"column\">\n              <label htmlFor=\"size\" className=\"second-text mb-4 mt-4\">\n                Size (Ha)\n              </label>\n              <TextField\n                id=\"size\"\n                name=\"size\"\n                value={values.size}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                type=\"number\"\n                sx={{ backgroundColor: \"#F3F3F4\", width: \"100%\" }}\n                InputProps={{ style: { height: \"44px\" } }}\n                className={errors.size && touched.size ? \"input-error\" : null}\n              />\n              {errors.size && touched.size && (\n                <span className=\"error\">{errors.size}</span>\n              )}\n            </Stack>\n\n            <Stack direction=\"row\" alignItems=\"center\">\n              <Stack direction=\"column\" flexGrow={1} className=\"mr-14\">\n                <label htmlFor=\"crop\" className=\"second-text mb-4 mt-4\">\n                  Crop <small className=\"text-red-500\">*</small>\n                </label>\n                <CustomSelect\n                  id=\"crop\"\n                  name=\"crop\"\n                  value={values.crop}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  noneLabel={<em>Select Crop</em>}\n                  options={cropProfiles?.data.map((eachCrop) => ({\n                    name: eachCrop.crop_name,\n                    value: eachCrop.id,\n                  }))}\n                  iconType=\"filled\"\n                  width=\"100%\"\n                  height=\"44px\"\n                  sx={{ backgroundColor: \"grey\" }}\n                  backgroundColor=\"#F3F3F4\"\n                  disableshadow=\"true\"\n                  iconwidth=\"48px\"\n                  className={errors.crop && touched.crop ? \"input-error\" : null}\n                />\n                {errors.crop && touched.crop && (\n                  <span className=\"error\">{errors.crop}</span>\n                )}\n              </Stack>\n\n              <Stack direction=\"column\" flexGrow={1}>\n                <label htmlFor=\"farmer\" className=\"second-text mb-4 mt-4\">\n                  Farmer <small className=\"text-red-500\">*</small>\n                </label>\n                <CustomSelect\n                  id=\"farmer\"\n                  name=\"farmer\"\n                  value={values.farmer}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  noneLabel={<em>Select Farmer</em>}\n                  options={farmers?.data.map((eachFarmer) => ({\n                    name: `${eachFarmer.first_name} ${eachFarmer.last_name}`,\n                    value: eachFarmer.id,\n                  }))}\n                  iconType=\"filled\"\n                  width=\"100%\"\n                  height=\"44px\"\n                  sx={{ backgroundColor: \"grey\" }}\n                  backgroundColor=\"#F3F3F4\"\n                  disableshadow=\"true\"\n                  iconwidth=\"48px\"\n                  className={\n                    errors.farmer && touched.farmer ? \"input-error\" : null\n                  }\n                />\n                {errors.farmer && touched.farmer && (\n                  <span className=\"error\">{errors.farmer}</span>\n                )}\n              </Stack>\n            </Stack>\n\n            <DialogActions>\n              <div className=\"buttons mt-8\">\n                <Button\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  value={isSubmitting ? \"Adding...\" : \"Submit\"}\n                  sx={{\n                    fontSize: \"14px\",\n                    borderRadius: \"5px\",\n                  }}\n                />\n              </div>\n            </DialogActions>\n          </form>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n\nexport const ViewMap = ({ closeHandler, data }) => {\n  return (\n    <Box sx={{ ...dialogContentStyles, minWidth: \"400px\" }}>\n      <DialogHeader\n        title={data?.farm_id || \"View Map\"}\n        closeHandler={closeHandler}\n      />\n      <div>No farm points</div>\n    </Box>\n  );\n};\n\nexport const BulkUploadFarms = ({ closeHandler }) => {\n  const dispatch = useDispatch();\n  let [isAdding, setIsAdding] = useState(false);\n  let [uploadFile, setUploadFile] = useState(null);\n\n  const fileHandler = (handleChange) => (e) => {\n    // console.log(e.target.files[0]);\n    setUploadFile(e.target.files[0]);\n    handleChange(e);\n  };\n\n  // console.log(roles);\n  return (\n    <Box sx={dialogContentStyles}>\n      <DialogHeader\n        title=\"Upload Excel File (.xls or .xlsx)\"\n        closeHandler={closeHandler}\n      />\n\n      <Formik\n        initialValues={{\n          upload: \"\",\n        }}\n        validate={(values) => {\n          const errors = {};\n          if (!values.upload) {\n            errors.upload = \"File is missing!\";\n          } else if (!/.+(\\.csv|\\.xlsx|\\.xls)$/gi.test(values.upload)) {\n            errors.upload =\n              \"The upload must be a file of type: csv, xlsx, xls.\";\n          }\n          return errors;\n        }}\n        onSubmit={async (values, { resetForm }) => {\n          const body = {\n            upload: uploadFile,\n          };\n          // console.log(body);\n          setIsAdding(true);\n          const response = dispatch(bulkUploadFarms(body));\n\n          response.then(() => {\n            setIsAdding(false);\n            resetForm();\n            closeHandler();\n          });\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <Stack direction=\"column\">\n              <TextField\n                sx={textFieldStyles}\n                id=\"upload\"\n                name=\"upload\"\n                type=\"file\"\n                InputProps={{ style: { height: \"44px\" } }}\n                onChange={fileHandler(handleChange)}\n                onBlur={handleBlur}\n                value={values.upload}\n                className={\n                  errors.upload && touched.upload ? \"input-error\" : null\n                }\n              />\n              {errors.upload && touched.upload && (\n                <span className=\"error\">{errors.upload}</span>\n              )}\n            </Stack>\n\n            <DialogActions>\n              <div className=\"buttons mt-8 justify-between\">\n                <div className=\"mr-3\">\n                  <Button\n                    value=\"Cancel\"\n                    onClick={closeHandler}\n                    sx={{\n                      color: \"#A9A9A9\",\n                      backgroundColor: \"white\",\n                    }}\n                  />\n                </div>\n\n                <div className=\"flex flex-row\">\n                  <div className=\"mr-3\">\n                    <Button\n                      type=\"submit\"\n                      className=\"mx-1\"\n                      disabled={isAdding}\n                      value={isAdding ? \"Uploading...\" : \"Upload\"}\n                    />\n                  </div>\n\n                  <div className=\"mr-3\">\n                    <Button\n                      // onClick={downloadHandler}\n                      href={FarmUploadTemplate}\n                      download=\"FARM_UPLOAD_SAMPLE.xlsx\"\n                      className=\"mx-1\"\n                      value=\"Download Template\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </DialogActions>\n          </form>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n\nexport const BulkAssignFarms = ({ closeHandler, selections }) => {\n  const dispatch = useDispatch();\n  const [isAdding, setIsAdding] = useState(false);\n  // console.log(roles);\n  const validationSchema = Yup.object({\n    sub_cluster: validations.blank().required(\"Sub-cluster is required\"),\n  });\n\n  const subClusters = useSelector(\n    (state) => state.FarmMangementReducer?.subClusters?.data || []\n  );\n\n  useEffect(() => {\n    dispatch(getSubClusters({ page: 1 }));\n  }, [dispatch]);\n\n  return (\n    <Box sx={dialogContentStyles}>\n      <DialogHeader title=\"Bulk Assign\" closeHandler={closeHandler} />\n\n      <Formik\n        initialValues={{\n          sub_cluster: \"\",\n        }}\n        validationSchema={validationSchema}\n        onSubmit={async (values, { resetForm }) => {\n          const body = {\n            sub_cluster: values.sub_cluster,\n            farms: selections.map((each) => each.id),\n          };\n          // console.log(body);\n          setIsAdding(true);\n          const response = dispatch(bulkAssignFarms(body));\n\n          response.then(() => {\n            setIsAdding(false);\n            resetForm();\n            closeHandler();\n          });\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <Stack direction=\"column\">\n              <span\n                className=\"second-text my-3\"\n                style={{ marginLeft: \"8px\", marginRight: \"8px\" }}\n              >{`Selected Farms: ${selections.length}`}</span>\n              <Stack\n                direction=\"row\"\n                flexWrap=\"wrap\"\n                sx={{\n                  mx: 1,\n                  mb: 2,\n                  width: \"100%\",\n                  maxWidth: \"400px\",\n                }}\n              >\n                {selections.map((each) => {\n                  return (\n                    <Chip\n                      label={each.farm_id}\n                      color=\"primary\"\n                      // variant=\"outlined\"\n                      size=\"small\"\n                      sx={{\n                        mr: 1,\n                        mb: 1,\n                        \"& .MuiChip-label\": {\n                          color: \"white\",\n                        },\n                      }}\n                    />\n                  );\n                })}\n              </Stack>\n\n              <Stack\n                direction=\"column\"\n                sx={{\n                  mx: 1,\n                  width: \"100%\",\n                }}\n              >\n                <label htmlFor=\"sub_cluster\" className=\"second-text my-3\">\n                  Sub Cluster <small className=\"text-red-500\">*</small>\n                </label>\n                <CustomSelect\n                  name=\"sub_cluster\"\n                  id=\"sub_cluster\"\n                  value={values.sub_cluster}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  noneLabel={<em>Select Sub-cluster</em>}\n                  iconType=\"filled\"\n                  width={{ md: \"400px\", xs: \"100%\" }}\n                  height=\"44px\"\n                  sx={{ backgroundColor: \"grey\" }}\n                  backgroundColor=\"#F3F3F4\"\n                  disableshadow=\"true\"\n                  options={subClusters.map((each) => ({\n                    value: each.id,\n                    name: each.name,\n                  }))}\n                  className={\n                    errors.sub_cluster && touched.sub_cluster\n                      ? \"input-error\"\n                      : null\n                  }\n                />\n                {errors.sub_cluster && touched.sub_cluster && (\n                  <span className=\"error\">{errors.sub_cluster}</span>\n                )}\n              </Stack>\n            </Stack>\n\n            <DialogActions>\n              <div className=\"buttons mt-8\">\n                <div className=\"\">\n                  <Button\n                    type=\"submit\"\n                    disabled={isAdding}\n                    value={isAdding ? \"Assigning...\" : \"Submit\"}\n                  />\n                </div>\n              </div>\n            </DialogActions>\n          </form>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n\nexport const AssignFarm = ({ closeHandler, farm }) => {\n  const dispatch = useDispatch();\n  const [isAdding, setIsAdding] = useState(false);\n  // console.log(roles);\n  const validationSchema = Yup.object({\n    sub_cluster: validations.blank().required(\"Sub-cluster is required\"),\n  });\n\n  const subClusters = useSelector(\n    (state) => state.FarmMangementReducer?.subClusters?.data || []\n  );\n\n  useEffect(() => {\n    dispatch(getSubClusters({ page: 1 }));\n  }, [dispatch]);\n\n  return (\n    <Box sx={dialogContentStyles}>\n      <DialogHeader title=\"Assign Farm\" closeHandler={closeHandler} />\n\n      <Formik\n        initialValues={{\n          sub_cluster: \"\",\n        }}\n        validationSchema={validationSchema}\n        onSubmit={async (values, { resetForm }) => {\n          const body = {\n            sub_cluster: values.sub_cluster,\n            farms: [farm.id],\n          };\n          // console.log(body);\n          setIsAdding(true);\n          const response = dispatch(bulkAssignFarms(body));\n\n          response.then(() => {\n            setIsAdding(false);\n            resetForm();\n            closeHandler();\n          });\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <Stack direction=\"column\">\n              <Stack\n                direction=\"column\"\n                sx={{\n                  mx: 1,\n                  width: \"100%\",\n                }}\n              >\n                <label htmlFor=\"sub_cluster\" className=\"second-text my-3\">\n                  Sub Cluster <small className=\"text-red-500\">*</small>\n                </label>\n                <CustomSelect\n                  name=\"sub_cluster\"\n                  id=\"sub_cluster\"\n                  value={values.sub_cluster}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  noneLabel={<em>Select Sub-cluster</em>}\n                  iconType=\"filled\"\n                  width={{ md: \"400px\", xs: \"100%\" }}\n                  height=\"44px\"\n                  sx={{ backgroundColor: \"grey\" }}\n                  backgroundColor=\"#F3F3F4\"\n                  disableshadow=\"true\"\n                  options={subClusters.map((each) => ({\n                    value: each.id,\n                    name: each.name,\n                  }))}\n                  className={\n                    errors.sub_cluster && touched.sub_cluster\n                      ? \"input-error\"\n                      : null\n                  }\n                />\n                {errors.sub_cluster && touched.sub_cluster && (\n                  <span className=\"error\">{errors.sub_cluster}</span>\n                )}\n              </Stack>\n            </Stack>\n\n            <DialogActions>\n              <div className=\"buttons mt-8\">\n                <div className=\"\">\n                  <Button\n                    type=\"submit\"\n                    disabled={isAdding}\n                    value={isAdding ? \"Assigning...\" : \"Submit\"}\n                  />\n                </div>\n              </div>\n            </DialogActions>\n          </form>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n"],"names":["AddCluster","closeHandler","roles","dispatch","useDispatch","useState","isSubmitting","setIsSubmitting","formValidationSchema","Yup","name","validations","required","manager","managers","setManagers","fetchManagers","useCallback","axiosServices","managerRes","result","data","console","log","useEffect","sx","dialogContentStyles","title","initialValues","description","validationSchema","onSubmit","values","resetForm","body","addCluster","then","errors","touched","handleChange","handleBlur","handleSubmit","direction","htmlFor","className","textFieldStyles","InputProps","style","height","id","onChange","onBlur","value","noneLabel","iconType","width","backgroundColor","disableshadow","iconwidth","options","map","eachManager","first_name","last_name","onClick","fontSize","color","borderRadius","type","disabled","EditCluster","updateCluster","placeholder","md","xs","AddSubCluster","agents","setAgents","clusters","useSelector","state","FarmMangementReducer","fetchAgents","agentRes","cluster","agent","getClusters","page","addSubCluster","eachAgent","eachCluster","EditSubCluster","updateSubcluster","ViewMap","minWidth","farm_id","BulkAssignFarms","selections","isAdding","setIsAdding","sub_cluster","subClusters","getSubClusters","farms","each","bulkAssignFarms","marginLeft","marginRight","length","flexWrap","mx","mb","maxWidth","label","size","mr","AssignFarm","farm"],"sourceRoot":""}