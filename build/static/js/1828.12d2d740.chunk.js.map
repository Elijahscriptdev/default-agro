{"version":3,"file":"static/js/1828.12d2d740.chunk.js","mappings":"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","sources":["layouts/Configurations/ManageCategories.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport Box from \"@mui/material/Box\";\nimport Link from \"@mui/material/Link\";\nimport Typography from \"@mui/material/Typography\";\nimport IconButton from \"@mui/material/IconButton\";\n\nimport { BiEditAlt as EditIcon } from \"react-icons/bi\";\nimport { RiDeleteBinLine as DeleteIcon } from \"react-icons/ri\";\n\nimport Table from \"../../components/Table/UserTable\";\nimport TableControls from \"../../components/Table/TableControls\";\nimport Dialog from \"../../components/Modals/Dialog\";\nimport Spinner from \"../../components/Spinner\";\nimport BreadCrumb from \"../../components/common/CustomBreadCrumbs\";\n\nimport {\n  EditCategory as EditCategoryModalContent,\n  DeleteCategory as DeleteCategoryModalContent,\n} from \"./ModalContents\";\n\nimport { getActivityCategories } from \"../../redux/actions/ConfigurationsActions\";\n// const { notify } = require(\"../../utils/toastNotification\");\n\nfunction ManageCropCategories() {\n  const dispatch = useDispatch();\n  // Table States\n  const [page, setPage] = useState(1);\n  const [limit, setLimit] = useState(10);\n  // const [query, setQuery] = useState(\"\");\n\n  // Modal States\n  const [dialogContent, setDialogContent] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n\n  const activityCategories = useSelector(\n    (state) => state.ConfigReducer.activityCategories\n  );\n\n  const handleModalOpen = useCallback(\n    (modalId, data = null) =>\n      (e) => {\n        switch (modalId) {\n          case \"edit-category\":\n            setDialogContent(\n              <EditCategoryModalContent\n                closeHandler={handleModalClose}\n                data={data}\n              />\n            );\n            break;\n\n          case \"delete-category\":\n            setDialogContent(\n              <DeleteCategoryModalContent\n                closeHandler={handleModalClose}\n                data={data}\n              />\n            );\n            break;\n\n          default:\n            setDialogContent(null);\n            break;\n        }\n        setShowModal(true);\n      },\n    []\n  );\n\n  const handleModalClose = () => {\n    setShowModal(false);\n  };\n\n  // onChange function for select\n  const handleLimitChange = (e) => {\n    setLimit(parseInt(e.target.value));\n  };\n\n  const setPrev = () => {\n    if (page > 1) setPage(page - 1);\n  };\n\n  const setNext = () => {\n    setPage(page + 1);\n  };\n\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"S/N\",\n        accessor: \"id\",\n      },\n      {\n        Header: \"Crop Profile\",\n        accessor: \"crop_profile.crop_name\",\n      },\n      {\n        Header: \"Category Name\",\n        accessor: \"category\",\n      },\n      {\n        Header: \"Edit\",\n        Cell: ({ value, row }) => {\n          const { original } = row;\n          // console.log(original);\n          return (\n            <IconButton onClick={handleModalOpen(\"edit-category\", original)}>\n              <EditIcon />\n            </IconButton>\n          );\n        },\n      },\n      {\n        Header: \"Delete\",\n        Cell: ({ value, row }) => {\n          const { original } = row;\n          // console.log(original);\n          return (\n            <IconButton onClick={handleModalOpen(\"delete-category\", original)}>\n              <DeleteIcon />\n            </IconButton>\n          );\n        },\n      },\n    ],\n    [handleModalOpen]\n  );\n\n  const tableData = useMemo(() => activityCategories?.data, [activityCategories]);\n\n  useEffect(() => {\n    dispatch(getActivityCategories({ page }));\n  }, [dispatch, page]);\n\n  return (\n    <React.Fragment>\n      <section>\n        <nav id=\"quick-nav\">\n          <BreadCrumb\n            breadcrumbs={[\n              <Typography key=\"1\" color=\"inherit\">\n                Configurations\n              </Typography>,\n              <Link\n                href=\"/configurations/crop-calendar\"\n                key=\"2\"\n                color=\"inherit\"\n              >\n                Crop calendar\n              </Link>,\n              <Typography key=\"3\" color=\"primary.main\">\n                Manage Categories\n              </Typography>,\n            ]}\n          />\n        </nav>\n\n        <h2 className=\"with-spinner\" style={{ fontSize: \"20px\" }}>\n          <span>All Categories</span>\n          {activityCategories?.loading ? <Spinner size={20} color=\"primary\" /> : \"\"}\n        </h2>\n        <Box>\n          <Table columns={columns} data={tableData} isLoading={activityCategories?.loading} />\n          <TableControls\n            nextHandler={() => setNext()}\n            prevHandler={() => setPrev()}\n            limitHandler={(e) => handleLimitChange(e)}\n            totalRecords={activityCategories?.total}\n            limit={limit}\n            page={page}\n          />\n        </Box>\n      </section>\n      <Dialog open={showModal} closeHandler={handleModalClose}>\n        {dialogContent}\n      </Dialog>\n    </React.Fragment>\n  );\n}\n\nexport default ManageCropCategories;\n"],"names":["dispatch","useDispatch","useState","page","setPage","limit","setLimit","dialogContent","setDialogContent","showModal","setShowModal","activityCategories","useSelector","state","ConfigReducer","handleModalOpen","useCallback","modalId","data","e","closeHandler","handleModalClose","columns","useMemo","Header","accessor","Cell","value","original","row","onClick","tableData","useEffect","getActivityCategories","id","breadcrumbs","color","href","className","style","fontSize","loading","size","isLoading","nextHandler","prevHandler","limitHandler","parseInt","target","handleLimitChange","totalRecords","total","open"],"sourceRoot":""}