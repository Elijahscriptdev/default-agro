{"version":3,"file":"static/js/8274.95e9bd8e.chunk.js","mappings":"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","sources":["components/Modals/globals.js","components/Table/TableWithCheck.jsx","components/common/CustomSearchField.jsx","components/icons/search.js","layouts/Payment/ModalContents/BulkSelectFarmer.js","layouts/Payment/SendMoney.jsx","utils/convertJSONToFormData.js","redux/actions/UserManagementActions.js"],"sourcesContent":["export const textFieldStyles = {\n  borderRadius: \"5px\",\n  backgroundColor: \"#F3F3F4\",\n  width: { md: \"477.61px\", xs: \"100%\" },\n  \"& fieldset\": {\n    border: \"none\"\n  }\n};\n\nexport const dialogContentStyles = {\n  minWidth: { xs: \"320px\", md: \"initial\" }\n};\n\nexport const dialogContentStyles2 = {\n  minWidth: { xs: \"520px\", md: \"initial\" }\n};","import React, { useEffect } from \"react\";\nimport { useTable, useRowSelect } from \"react-table\";\nimport Spinner from \"../Spinner\";\n\nexport default function TableWithCheck({ columns, data, isLoading = false, setSelectedRows = () => {} }) {\n  const IndeterminateCheckbox = React.forwardRef(\n    ({ indeterminate, ...rest }, ref) => {\n      const defaultRef = React.useRef();\n      const resolvedRef = ref || defaultRef;\n      React.useEffect(() => {\n        resolvedRef.current.indeterminate = indeterminate;\n      }, [resolvedRef, indeterminate]);\n      return (\n        <>\n          <input type=\"checkbox\" ref={resolvedRef} {...rest} />\n        </>\n      );\n    }\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    selectedFlatRows,\n  } = useTable({ columns, data }, useRowSelect, (hooks) => {\n    hooks.visibleColumns.push((columns) => [\n      // Let's make a column for selection\n      {\n        id: \"selection\",\n        Header: ({ getToggleAllRowsSelectedProps }) => (\n          <div>\n            <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\n          </div>\n        ),\n        Cell: ({ row }) => {\n          // const { original } = row;\n          // console.log(\"kdkdkddk\", row.getToggleRowSelectedProps());\n          const checkProps = row.getToggleRowSelectedProps();\n          return (\n            <div>\n              <IndeterminateCheckbox {...checkProps} />\n            </div>\n          );\n        },\n      },\n      ...columns,\n    ]);\n  });\n\n  // console.log('flatRows', selectedFlatRows);\n  useEffect(() => {\n    setSelectedRows(selectedFlatRows.map(\n      d => d.original\n    ));\n  }, [selectedFlatRows, setSelectedRows]);\n\n  return (\n    <div className=\"mt-2 mb-5 flex flex-col overflow-x-auto border\">\n      <div className=\"-my-2 -mx-4 sm:-mx-6 lg:-mx-8\">\n        <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n          <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n            <table\n              {...getTableProps()}\n              className=\"min-w-full divide-y divide-gray-200\"\n            >\n              <thead className=\"bg-gray-50\">\n                {headerGroups.map((headerGroup) => (\n                  <tr {...headerGroup.getHeaderGroupProps()}>\n                    {headerGroup.headers.map((column) => (\n                      <th\n                        {...column.getHeaderProps()}\n                        scope=\"col\"\n                        className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                      >\n                        {column.render(\"Header\")}\n                      </th>\n                    ))}\n                  </tr>\n                ))}\n              </thead>\n              <tbody\n                {...getTableBodyProps()}\n                className=\"bg-white divide-y divide-gray-200\"\n              >\n                {rows.map((row) => {\n                  prepareRow(row);\n                  return (\n                    <tr {...row.getRowProps()}>\n                      {row.cells.map((cell, index) => {\n                        return (\n                          <td\n                            key={index}\n                            {...cell.getCellProps}\n                            className=\"px-6 py-4 whitespace-nowrap\"\n                          >\n                            {cell.render(\"Cell\")}\n                          </td>\n                        );\n                      })}\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n            {data.length === 0 ? (\n              <div className=\"bg-gray-50 no-table-data\">\n                {isLoading ? (\n                  <Spinner size={20} color=\"primary\" />\n                ) : (\n                  <div\n                    className=\"flex flex-col\"\n                    style={{ alignItems: \"center\" }}\n                  >\n                    <svg\n                      width=\"36\"\n                      height=\"30\"\n                      viewBox=\"0 0 36 30\"\n                      fill=\"none\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                      <path\n                        d=\"M34.1995 10.7998H6.19993L2 28.9995H29.9995L34.1995 10.7998Z\"\n                        stroke=\"#009688\"\n                        strokeOpacity=\"0.4\"\n                        strokeWidth=\"2\"\n                        strokeMiterlimit=\"10\"\n                      />\n                      <path\n                        d=\"M2 28.9995V1H11.0999L13.8998 4.49994H32.0995V10.7998\"\n                        stroke=\"#009688\"\n                        strokeOpacity=\"0.4\"\n                        strokeWidth=\"2\"\n                        strokeMiterlimit=\"10\"\n                      />\n                    </svg>\n                    <span className=\"mt-2\">No Data</span>\n                  </div>\n                )}\n              </div>\n            ) : null}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport TextField from \"@mui/material/TextField\";\n\nconst CustomSearchField = (props) => {\n  const { sx = {}, placeholder = \"\", value=\"\", ...rest } = props;\n  return (\n    <TextField\n      // defaultValue={props.value || \"\"}\n      placeholder={placeholder}\n      sx={{\n        p: 0,\n        border: \"1px solid rgba(0, 150, 136, 0.2)\",\n        borderRadius: \"5px\",\n        backgroundColor: \"#FFF\",\n        \"& *\": {\n          borderColor: \"transparent\",\n        },\n        \"& input\": {\n          padding: \"10px\",\n        },\n        ...sx,\n      }}\n      value={value}\n      {...rest}\n    />\n  );\n};\n\nexport default CustomSearchField;\n","import { createSvgIcon } from '@mui/material/utils';\n\nexport const Search = createSvgIcon(\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n    <path\n      fillRule=\"evenodd\"\n      d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>, 'Search');\n","import { IconButton, InputAdornment } from \"@mui/material\";\nimport React, { useRef, useMemo, useEffect, useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { Search as SearchIcon } from \"../../../components/icons/search\";\nimport { IoMdClose as CloseIcon } from \"react-icons/io\";\n\nimport TableWithCheck from \"../../../components/Table/TableWithCheck\";\nimport { getFarmers } from \"../../../redux/actions/UserManagementActions\";\nimport CustomSearchField from \"../../../components/common/CustomSearchField\";\nimport Button from \"../../../components/common/Button\";\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    // maxHeight: \"70vh\",\n    padding: \"30px 50px\",\n  },\n};\n\nconst BulkSelectFarmer = ({ setRow }) => {\n  const [modalIsOpen, setIsOpen] = React.useState(false);\n\n  function openModal() {\n    setIsOpen(true);\n  }\n\n  function afterOpenModal() {}\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  const dispatch = useDispatch();\n  const farmers = useSelector((state) => state.UserManagementReducer.farmers);\n  const [page, setPage] = useState(1);\n  const [limit, setLimit] = useState(15);\n  const [query, setQuery] = useState(\"\");\n\n  const [status, setStatus] = useState(\"\");\n\n  // const [dialogContent, setDialogContent] = useState(null);\n  // const [showModal, setShowModal] = useState(false);\n\n\n  const queryRef = useRef(null);\n\n  // onChange function for select\n  // const handleLimitChange = (e) => {\n  //   setLimit(parseInt(e.target.value));\n  // };\n\n  // const setPrev = () => {\n  //   if (page > 1) setPage(page - 1);\n  // };\n\n  // const setNext = () => {\n  //   setPage(page + 1);\n  // };\n\n  // const handler = () => {\n  //   notify(\"Hello, world!\");\n  // };\n\n  // const handleModalClose = () => {\n  //   setShowModal(false);\n  // };\n\n  // const handleModalOpen = useCallback(\n  //   (modalId, data = null) =>\n  //     (e) => {\n  //       switch (modalId) {\n  //         case \"upload-farmers\":\n  //           // console.log(data);\n  //           setDialogContent(\n  //             <UploadFarmerModalContent closeHandler={handleModalClose} />\n  //           );\n  //           break;\n\n  //         default:\n  //           setDialogContent(null);\n  //           break;\n  //       }\n  //       setShowModal(true);\n  //     },\n  //   []\n  // );\n\n  // get checked farmers data\n  // const getCheckedFarmers = () => {\n  //   const checkedFarmers = farmers.filter((farmer) => farmer.checked);\n  //   return checkedFarmers;\n  // };\n\n  // console.log(\"getCheckedFarmers\", getCheckedFarmers());\n\n  useEffect(() => {\n    const body = {\n      page,\n      per_page: limit,\n      search_farmer_by_name: query,\n    };\n\n    dispatch(getFarmers(body));\n  }, [dispatch, page, limit, status, query]);\n\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"Surname\",\n        accessor: \"last_name\",\n      },\n      {\n        Header: \"Other Names\",\n        Cell: ({ value, row }) => {\n          const { original } = row;\n          // console.log(original);\n          return (\n            <span style={{ textTransform: \"capitalize\" }}>{`${\n              original?.first_name\n            } ${original?.middle_name?.charAt(0).toUpperCase()}.`}</span>\n          );\n        },\n      },\n      {\n        Header: \"Mobile\",\n        accessor: \"mobile\",\n      },\n      {\n        Header: \"State\",\n        accessor: \"state.name\",\n      },\n    ],\n    []\n  );\n\n  const tableData = useMemo(() => farmers?.data || [], [farmers?.data]);\n  console.log(\"tableData\", tableData);\n\n  return (\n    <div>\n      <svg\n        onClick={openModal}\n        style={{ cursor: \"pointer\" }}\n        width='20'\n        height='20'\n        viewBox='0 0 26 26'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n      >\n        <path\n          d='M13 2.5C18.775 2.5 23.5 7.225 23.5 13C23.5 18.775 18.775 23.5 13 23.5C7.225 23.5 2.5 18.775 2.5 13C2.5 7.225 7.225 2.5 13 2.5ZM13 0.75C6.2625 0.75 0.75 6.2625 0.75 13C0.75 19.7375 6.2625 25.25 13 25.25C19.7375 25.25 25.25 19.7375 25.25 13C25.25 6.2625 19.7375 0.75 13 0.75Z'\n          fill='#14B6A7'\n        />\n        <path\n          d='M20 12.125H13.875V6H12.125V12.125H6V13.875H12.125V20H13.875V13.875H20V12.125Z'\n          fill='#14B6A7'\n        />\n      </svg>\n      <Modal\n        isOpen={modalIsOpen}\n        onAfterOpen={afterOpenModal}\n        onRequestClose={closeModal}\n        style={customStyles}\n        contentLabel='Example Modal'\n      >\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n          <p></p>\n\n          <IconButton onClick={closeModal}>\n            <CloseIcon className='closeicon' />\n          </IconButton>\n        </div>\n\n        <CustomSearchField\n          InputProps={{\n            ref: queryRef,\n            startAdornment: (\n              <InputAdornment position='start'>\n                <SearchIcon fontSize='small' />\n              </InputAdornment>\n            ),\n          }}\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          placeholder='Search'\n          sx={{\n            width: \"100%\",\n            maxWidth: { sm: \"250px\" },\n          }}\n        />\n        <div style={{ maxHeight: \"70vh\", padding: \"30px 0px\" }}>\n          <TableWithCheck\n            columns={columns}\n            data={tableData}\n            isLoading={farmers.loading}\n            setSelectedRows={setRow}\n          />\n          <div>\n            <Button\n              sx={{\n                margin: \"30px 0px\",\n              }}\n              value=\"Continue\"\n              onClick={closeModal}\n            />\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default BulkSelectFarmer;\n","import React, { useEffect, useState } from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport axiosServices from \"../../services/axiosServices\";\nimport Box from \"@mui/material/Box\";\nimport { Chip, Link, Stack } from \"@mui/material\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { Formik } from \"formik\";\n// import * as Yup from \"yup\";\n// import { validations } from \"../../utils/validations\";\n// import Can, { check } from \"../../utils/rbac/Can\";\nimport TextField from \"@mui/material/TextField\";\nimport BreadCrumb from \"../../components/common/CustomBreadCrumbs\";\nimport Button from \"../../components/common/Button\";\nimport { textFieldStyles } from \"../../components/Modals/globals\";\n// import SelectSearch from \"react-select-search\";\n// import Autocomplete from \"@mui/material/Autocomplete\";\nimport { MenuItem } from \"@mui/material\";\nimport { getFarmers } from \"../../redux/actions/UserManagementActions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport { useNavigate } from \"react-router-dom\";\nimport BulkSelectFarmer from \"./ModalContents/BulkSelectFarmer\";\nimport Spinner from \"../../components/Spinner\";\n\nconst SendMoney = () => {\n  // const userDetails = useSelector ((state) => state.AuthReducer);\n  const dispatch = useDispatch();\n  const [individual, setIndividual] = useState(true);\n  const [bulk, setBulk] = useState(false);\n  // const [data, setData] = useState([]);\n  const [isAdding, setIsAdding] = useState(false);\n  // const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n\n  const farmers = useSelector((state) => state.UserManagementReducer.farmers);\n  const [page] = useState(1);\n  const [limit] = useState(150000000000);\n  const [query] = useState(\"\");\n\n  const [status] = useState(\"\");\n  const [state] = useState(\"\");\n  const [lga] = useState(\"\");\n  const [season] = useState(\"\");\n\n  const initialSinglePayload = {\n    amount: \"\",\n    farmerId: \"\",\n    narration: \"\",\n    destinationAccountNumber: \"\",\n    destinationBankCode: \"\",\n    bankCode: \"\",\n    bank: \"\",\n    tenantId: \"\",\n    userId: \"\",\n  };\n  const [singlePaymentPayload, setSinglePaymentPayload] =\n    useState(initialSinglePayload);\n\n  const [bulkAmount, setBulkAmount] = useState(\"\");\n  const [bulkNarration, setBulkNarration] = useState(\"\");\n  const [row, setRow] = useState([]);\n\n  const handleIndividual = () => {\n    setIndividual(true);\n    setBulk(false);\n  };\n\n  const handleBulk = () => {\n    setBulk(true);\n    setIndividual(false);\n  };\n\n  const dialogTextStyles = {\n    ...textFieldStyles,\n    width: {\n      ...textFieldStyles.width,\n      md: \"auto\",\n    },\n  };\n\n  const user_profile = JSON.parse(sessionStorage.getItem(\"user_profile\"));\n  // console.log(\"user_profile\", user_profile);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const body = {\n      ...singlePaymentPayload,\n      bank_code: singlePaymentPayload.bankCode,\n      destinationBankCode: singlePaymentPayload.bankCode,\n      farmer_id: singlePaymentPayload.farmerId,\n      tenant_id: user_profile.tenant_id,\n      user_id: user_profile.id,\n    };\n\n    try {\n      setIsAdding(true);\n      const res = await axiosServices.post(`/payment/loan-disbursement`, body);\n      toast.success(\"Disbursement Successful\");\n      console.log(res);\n      navigate(\"/payment/disbursments\");\n      setSinglePaymentPayload(initialSinglePayload);\n    } catch (error) {\n      console.log(error.response.data.error);\n      toast.error(error.response.data.error);\n      return error;\n    } finally {\n      setIsAdding(false);\n    }\n  };\n\n  const handleBulkSubmit = async (e) => {\n    e.preventDefault();\n\n    const newData =\n      row &&\n      row.map((item) => {\n        return {\n          farmer_id: item.id,\n          account_no: item.account_no,\n          bank: item.bank,\n          amount: bulkAmount,\n          reference:\n            \"tr-\" +\n            Math.random().toString(36).substring(7) +\n            new Date().valueOf(),\n          narration: bulkNarration,\n          destinationBankCode: item.bank_code,\n          destinationAccountNumber: item.account_no,\n          currency: \"NGN\",\n          first_name: item.first_name + \" \" + item.last_name,\n        };\n      });\n\n    const body = {\n      title: \"Loan Disbursment\",\n      narration: bulkNarration,\n      tenant_id: user_profile.tenant_id,\n      user_id: user_profile.id,\n      transactionList: newData,\n    };\n\n    try {\n      setIsAdding(true);\n      const res = await axiosServices.post(\n        `/payment/bulk-loan-disbursement`,\n        body\n      );\n      toast.success(\"Disbursement Successful\");\n      console.log(res);\n      navigate(\"/payment/disbursments\");\n    } catch (error) {\n      console.log(error.response.data.error);\n      toast.error(error.response.data.error);\n      return error;\n    } finally {\n      setIsAdding(false);\n    }\n  };\n\n  useEffect(() => {\n    const filters = {\n      page,\n      per_page: limit,\n      search_farmer_by_name: query,\n    };\n\n    if (state !== \"\") {\n      filters.state = state;\n    } else {\n      delete filters.state;\n    }\n\n    if (status !== \"\") {\n      filters.status = status;\n    } else {\n      delete filters.status;\n    }\n\n    if (lga !== \"\") {\n      filters.lga = lga;\n    } else {\n      delete filters.lga;\n    }\n\n    if (season !== \"\") {\n      filters.season = season;\n    } else {\n      delete filters.season;\n    }\n\n    dispatch(getFarmers(filters));\n  }, [dispatch, page, limit, status, state, lga, season, query]);\n\n  return (\n    <div>\n      <nav id=\"quick-nav\">\n        <BreadCrumb\n          breadcrumbs={[\n            <Typography key=\"1\" color=\"inherit\">\n              Payments\n            </Typography>,\n            <Link href=\"/payment/disbursments\" key=\"2\" color=\"inherit\">\n              Disbursment\n            </Link>,\n            <Typography key=\"3\" color=\"primary.main\">\n              Send Money\n            </Typography>,\n          ]}\n        />\n      </nav>\n      <Box>\n        <Box\n          sx={{\n            display: \"flex\",\n            gap: 50,\n            background: \"#009688\",\n            boxShadow: \"0px 5px 20px rgba(108, 117, 125, 0.15)\",\n            borderRadius: \"5px\",\n            padding: \"20px\",\n            width: \"100%\",\n            textAlign: \"center\",\n          }}\n        >\n          <div\n            onClick={handleIndividual}\n            style={{\n              color: \"black\",\n              background: \"white\",\n              width: \"100%\",\n              cursor: \"pointer\",\n              padding: \"10px\",\n            }}\n          >\n            Individual Transfer\n          </div>\n          <div\n            onClick={handleBulk}\n            style={{\n              color: \"black\",\n              background: \"white\",\n              width: \"100%\",\n              cursor: \"pointer\",\n              padding: \"10px\",\n            }}\n          >\n            Bulk Transfer\n          </div>\n        </Box>\n\n        <Box>\n          {individual && (\n            <Stack\n              direction=\"column\"\n              px={4}\n              py={3}\n              alignItems=\"flex-start\"\n              sx={{\n                backgroundColor: \"#FFF\",\n                boxShadow: \"0px 5px 20px rgba(108, 117, 125, 0.15)\",\n                borderRadius: \"5px\",\n              }}\n            >\n              <h3 className=\"first-text ml-1.5\">Send Money</h3>\n\n              <form\n                style={{ width: \"100%\", border: \"1px solid transparent\" }}\n                onSubmit={handleSubmit}\n              >\n                <Stack\n                  direction=\"row\"\n                  justifyContent=\"space-between\"\n                  sx={{\n                    flexWrap: {\n                      xs: \"wrap\",\n                      lg: \"nowrap\",\n                    },\n                  }}\n                >\n                  <Stack\n                    direction=\"column\"\n                    sx={{\n                      mx: 1,\n                      width: \"100%\",\n                    }}\n                  >\n                    <label htmlFor=\"farmer_id\" className=\"second-text my-3\">\n                      Farmer <small className=\"text-red-500\">*</small>\n                    </label>\n                    <TextField\n                      id=\"farmer_id\"\n                      sx={dialogTextStyles}\n                      name=\"farmer_id\"\n                      select\n                      required\n                      InputProps={{ style: { height: \"44px\" } }}\n                      onChange={(e) => {\n                        setSinglePaymentPayload((state) => ({\n                          ...state,\n                          farmerId: e.target.value,\n                        }));\n                        farmers?.data.forEach((farmer) => {\n                          if (farmer.id === e.target.value) {\n                            setSinglePaymentPayload((state) => ({\n                              ...state,\n                              bank: farmer.bank ? farmer.bank : \"\",\n                              destinationAccountNumber: farmer.account_no\n                                ? farmer.account_no\n                                : \"\",\n                              bankCode: farmer.bank_code\n                                ? farmer.bank_code\n                                : \"\",\n                            }));\n                          }\n                        });\n                      }}\n                      value={singlePaymentPayload.farmerId}\n                    >\n                      {farmers.loading && (\n                        <div className=\"flex flex-row items-center justify-center\">\n                          <Spinner size={20} color=\"secondary\" />\n                        </div>\n                      )}\n                      {farmers?.data &&\n                        farmers?.data.map((option) => (\n                          <MenuItem key={option.id} value={option.id}>\n                            {option.first_name + \" \" + option.last_name}\n                          </MenuItem>\n                        ))}\n                    </TextField>\n                  </Stack>\n\n                  <Stack\n                    direction=\"column\"\n                    sx={{\n                      mx: 1,\n                      width: \"100%\",\n                    }}\n                  >\n                    <label htmlFor=\"bank\" className=\"second-text my-3\">\n                      Bank Name <small className=\"text-red-500\">*</small>\n                    </label>\n                    <TextField\n                      sx={dialogTextStyles}\n                      id=\"bank\"\n                      name=\"bank\"\n                      required\n                      InputProps={{ style: { height: \"44px\" } }}\n                      value={singlePaymentPayload.bank}\n                    />\n                  </Stack>\n                </Stack>\n\n                <Stack\n                  direction=\"row\"\n                  justifyContent=\"space-between\"\n                  sx={{\n                    flexWrap: {\n                      xs: \"wrap\",\n                      lg: \"nowrap\",\n                    },\n                  }}\n                >\n                  <Stack\n                    direction=\"column\"\n                    sx={{\n                      mx: 1,\n                      width: \"100%\",\n                    }}\n                  >\n                    <label\n                      htmlFor=\"destinationAccountNumber\"\n                      className=\"second-text my-3\"\n                    >\n                      Account Number <small className=\"text-red-500\">*</small>\n                    </label>\n                    <TextField\n                      sx={dialogTextStyles}\n                      id=\"destinationAccountNumber\"\n                      name=\"destinationAccountNumber\"\n                      required\n                      InputProps={{ style: { height: \"44px\" } }}\n                      value={singlePaymentPayload.destinationAccountNumber}\n                    />\n                  </Stack>\n\n                  <Stack\n                    direction=\"column\"\n                    sx={{\n                      mx: 1,\n                      width: \"100%\",\n                    }}\n                  >\n                    <label htmlFor=\"amount\" className=\"second-text my-3\">\n                      Recipient Amount <small className=\"text-red-500\">*</small>\n                    </label>\n                    <TextField\n                      sx={dialogTextStyles}\n                      id=\"amount\"\n                      name=\"amount\"\n                      required\n                      InputProps={{ style: { height: \"44px\" } }}\n                      onChange={(e) =>\n                        setSinglePaymentPayload({\n                          ...singlePaymentPayload,\n                          amount: e.target.value,\n                        })\n                      }\n                      value={singlePaymentPayload.amount}\n                    />\n                  </Stack>\n                </Stack>\n\n                <Stack\n                  direction=\"row\"\n                  justifyContent=\"space-between\"\n                  sx={{\n                    flexWrap: {\n                      xs: \"wrap\",\n                      lg: \"nowrap\",\n                    },\n                  }}\n                >\n                  <Stack\n                    direction=\"column\"\n                    sx={{\n                      mx: 1,\n                      width: {\n                        xs: \"100%\",\n                      },\n                    }}\n                  >\n                    <label htmlFor=\"narration\" className=\"second-text my-3\">\n                      Payment Description\n                      <small className=\"text-red-500\">*</small>\n                    </label>\n                    <TextField\n                      type=\"textarea\"\n                      sx={dialogTextStyles}\n                      id=\"narration\"\n                      name=\"narration\"\n                      InputProps={{ style: { height: \"44px\" } }}\n                      onChange={(e) =>\n                        setSinglePaymentPayload({\n                          ...singlePaymentPayload,\n                          narration: e.target.value,\n                        })\n                      }\n                      value={singlePaymentPayload.narration}\n                    />\n                  </Stack>\n                </Stack>\n\n                <div className=\"buttons mt-8 ml-1.5\">\n                  <div className=\"\">\n                    <Button\n                      type=\"submit\"\n                      disabled={isAdding || farmers.loading}\n                      value={isAdding ? \"Adding...\" : \"Submit\"}\n                      // onClick={handleSubmit}\n                    />\n                  </div>\n                </div>\n              </form>\n            </Stack>\n          )}\n\n          {bulk && (\n            <Stack\n              direction=\"column\"\n              px={4}\n              py={3}\n              alignItems=\"flex-start\"\n              sx={{\n                backgroundColor: \"#FFF\",\n                boxShadow: \"0px 5px 20px rgba(108, 117, 125, 0.15)\",\n                borderRadius: \"5px\",\n              }}\n            >\n              <h3 className=\"first-text ml-1.5\">Send Money</h3>\n\n              <form\n                style={{ width: \"100%\", border: \"1px solid transparent\" }}\n                onSubmit={handleBulkSubmit}\n              >\n                <Stack\n                  direction=\"column\"\n                  justifyContent=\"space-between\"\n                  sx={{\n                    flexWrap: {\n                      xs: \"wrap\",\n                      lg: \"nowrap\",\n                    },\n                  }}\n                >\n                  <Stack\n                    direction=\"column\"\n                    sx={{\n                      mx: 1,\n                      width: \"100%\",\n                    }}\n                  >\n                    <label htmlFor=\"amount\" className=\"second-text my-3\">\n                      Recipient Amount\n                      <small className=\"text-red-500\">*</small>\n                    </label>\n                    <TextField\n                      sx={dialogTextStyles}\n                      id=\"bulkAmount\"\n                      name=\"bulkAmount\"\n                      InputProps={{ style: { height: \"44px\" } }}\n                      onChange={(e) => setBulkAmount(e.target.value)}\n                      value={bulkAmount}\n                      required\n                    />\n                  </Stack>\n\n                  <Stack\n                    direction=\"column\"\n                    sx={{\n                      mx: 1,\n                      width: {\n                        xs: \"100%\",\n                      },\n                    }}\n                  >\n                    <label htmlFor=\"narration\" className=\"second-text my-3\">\n                      Payment Description\n                      <small className=\"text-red-500\">*</small>\n                    </label>\n                    <TextField\n                      type=\"textarea\"\n                      sx={dialogTextStyles}\n                      id=\"bulkNarration\"\n                      name=\"bulkNarration\"\n                      InputProps={{ style: { height: \"44px\" } }}\n                      onChange={(e) => setBulkNarration(e.target.value)}\n                      value={bulkNarration}\n                      required\n                    />\n                  </Stack>\n                </Stack>\n\n                <div\n                  style={{\n                    display: \"flex\",\n                    gap: \"10px\",\n                    marginTop: \"30px\",\n                  }}\n                >\n                  <label>Add Recipient</label>\n                  <BulkSelectFarmer setRow={setRow} />\n                </div>\n\n                <div\n                  style={{\n                    display: \"flex\",\n                    gap: \"10px\",\n                    marginTop: \"10px\",\n                    backgroundColor: \"#F3F3F4\",\n                    borderRadius: \"5px\",\n                    padding: \"10px\",\n                    minHeight: \"50px\",\n                    maxHeight: \"150px\",\n                    width: \"100%\",\n                    flexWrap: \"wrap\",\n                    overflowY: \"scroll\",\n                  }}\n                >\n                  {row &&\n                    row.map((item, index) => {\n                      return (\n                        <Chip\n                          key={index}\n                          label={item.first_name}\n                          color=\"primary\"\n                          sx={{\n                            \"& .MuiChip-label\": {\n                              color: \"white\",\n                            },\n                          }}\n                        />\n                      );\n                    })}\n                </div>\n\n                <div className=\"buttons mt-8 ml-1.5\">\n                  <div className=\"\">\n                    <Button\n                      type=\"submit\"\n                      disabled={isAdding}\n                      // onClick={(e) => handleBulkSubmit(e)}\n                      value={isAdding ? \"Adding...\" : \"Submit\"}\n                    />\n                  </div>\n                </div>\n              </form>\n            </Stack>\n          )}\n        </Box>\n      </Box>\n    </div>\n  );\n};\n\nexport default SendMoney;\n\n// const top100Films = [\n//   { title: \"The Shawshank Redemption\", year: 1994 },\n//   { title: \"The Godfather\", year: 1972 },\n//   { title: \"The Godfather: Part II\", year: 1974 },\n//   { title: \"The Dark Knight\", year: 2008 },\n//   { title: \"12 Angry Men\", year: 1957 },\n//   { title: \"Schindler's List\", year: 1993 },\n//   { title: \"Pulp Fiction\", year: 1994 },\n// ];\n\n// const currencies = [\n//   {\n//     value: \"USD\",\n//     label: \"$\",\n//   },\n//   {\n//     value: \"EUR\",\n//     label: \"€\",\n//   },\n//   {\n//     value: \"BTC\",\n//     label: \"฿\",\n//   },\n//   {\n//     value: \"JPY\",\n//     label: \"¥\",\n//   },\n// ];\n\n// const transactionList = [\n//   {\n//     value: \"1\",\n//     first_name: \"John\",\n//   },\n//   {\n//     value: \"2\",\n//     first_name: \"Jane\",\n//   },\n// ];\n\n/* <SelectSearch\n    options={[]}\n    defaultValue='15997'\n    // onChange={(e) => {\n    //   setFarmer_id(e.value);\n    //   // setFarmerName(e.label);\n    // }}\n    getOptions={(query) => {\n      return new Promise((resolve, reject) => {\n        fetch(\n          `https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${query}`\n        )\n          .then((response) => response.json())\n          .then(({ drinks }) => {\n            resolve(\n              drinks.map(({ idDrink, strDrink }) => ({\n                value: idDrink,\n                name: strDrink,\n              }))\n            );\n          })\n          .catch(reject);\n      });\n    }}\n    search\n    placeholder='Your favorite drink'\n  />\n  <Stack spacing={2} sx={{ width: 300 }}>\n    <Autocomplete\n      id='free-solo-demo'\n      freeSolo\n      options={top100Films.map((option) => option.title)}\n      renderInput={(params) => (\n        <TextField {...params} label='freeSolo' />\n      )}\n    />\n    <Autocomplete\n      freeSolo\n      id='free-solo-2-demo'\n      value={value}\n      onChange={(event, newValue) => {\n        setValue(newValue);\n        console.log(\"event\", event.target.value);\n        // farmers.map((farmer) => {\n        //   if (farmer.id === e.target.value) {\n        //     setBank(farmer.bank);\n        //     setDestinationAccountNumber(farmer.account_no);\n        //     setBankCode(farmer.bank_code);\n        //   }\n        // });\n      }}\n      // isOptionEqualToValue={(option, value) =>\n      //   option.value === value.value\n      // }\n      disableClearable\n      options={\n        farmers &&\n        farmers.map(\n          (option) =>\n            option.first_name + \" \" + option.last_name\n        )\n      }\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label='Search input'\n          InputProps={{\n            ...params.InputProps,\n            type: \"search\",\n          }}\n          onChange={(e) => {\n            setInputValue(e.target.value);\n          }}\n        />\n      )}\n    />\n  </Stack> */\n","export function convertToFormData(body = {}) {\n  const bodyFormData = new FormData();\n  if (Object.keys(body).length > 0) {\n    console.log({ body });\n    Object.keys(body).forEach((key) => {\n      bodyFormData.append(key, body[key]);\n    });\n  }\n  return bodyFormData;\n}","import axiosServices, { useAxiosService } from \"../../services/axiosServices\";\nimport { notify } from \"../../utils/toastNotification\";\nimport { errorHandler } from \"../../utils/actionsErrorHandler\";\nimport { createQuery } from \"../../utils/createQuery\";\nimport { convertToFormData } from \"../../utils/convertJSONToFormData\";\nimport {\n  GET_USERS_SUCCESS,\n  GET_USERS_FAIL,\n  ADD_USER_SUCCESS,\n  ADD_USER_FAIL,\n  LOADING_USERS,\n  GET_FARMERS_SUCCESS,\n  GET_FARMER_FAIL,\n  ADD_FARMER_SUCCESS,\n  ADD_FARMER_FAIL,\n  LOADING_FARMER,\n  GET_SOURCING_AGENTS_SUCCESS,\n  GET_SOURCING_AGENTS_FAIL,\n  ADD_SOURCING_AGENT_SUCCESS,\n  ADD_SOURCING_AGENT_FAIL,\n  LOADING_SOURCING_AGENTS,\n} from \"../types/UserManagementTypes\";\n\nexport const getUsers =\n  (queryParams = {}) =>\n  async (dispatch) => {\n    let page = queryParams.page || 1;\n    let limit = queryParams.limit || 10;\n    let query = createQuery(queryParams);\n    dispatch({ type: LOADING_USERS });\n    queryParams = createQuery(queryParams);\n    try {\n      const res = await axiosServices.get(\n        `/viewusers?page=${page}&limit=${limit}&query=${query}`\n      );\n      dispatch({\n        type: GET_USERS_SUCCESS,\n        payload: res,\n      });\n      // console.log(\"first data\", res?.data);\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: GET_USERS_FAIL,\n      });\n      errorHandler(error, \"Failed to fetch users\");\n      return error;\n    }\n  };\n\nexport const addUser = (data) => async (dispatch) => {\n  // dispatch({ type: LOADING_USERS, payload: true });\n  try {\n    const res = await axiosServices.post(`/users`, data);\n\n    if (res?.success && res?.result) {\n      notify(\"User added successfully\", { type: \"success\" });\n      dispatch({\n        type: ADD_USER_SUCCESS,\n        payload: res.result,\n      });\n      return res;\n      // dispatch(getUsers({ page: 1 }));\n    }\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: ADD_USER_FAIL,\n    });\n    errorHandler(error, \"Failed to add user\");\n    return error;\n  }\n};\n\nexport const bulkUploadUsers = (data) => async (dispatch) => {\n  try {\n    data = convertToFormData(data);\n\n    const res = await useAxiosService(\"formData\").post(\n      `/users/bulk-upload`,\n      data,\n      {}\n    );\n\n    // console.log(res);\n\n    if (res?.success && res?.result) {\n      notify(\"Users uploaded successfully\", { type: \"success\" });\n      dispatch(getUsers({ page: 1 }));\n    }\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to upload users\");\n    return error;\n  }\n};\n\nexport const updateUser = (userId, data) => async (dispatch) => {\n  // dispatch({ type: LOADING_USERS, payload: true });\n  try {\n    const res = await axiosServices.patch(`/users/${userId}`, data);\n\n    if (res?.success && res?.result) {\n      notify(\"User Updated successfully\", { type: \"success\" });\n      return res;\n    }\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to update user\");\n    return error;\n  }\n};\n\nexport const deleteUser = (userId) => async (dispatch) => {\n  try {\n    const res = await axiosServices.delete(`/users/${userId}`);\n    if (res) {\n      notify(\"User deleted successfully\", { type: \"success\" });\n      dispatch(getUsers({ page: 1 }));\n    }\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to delete user\");\n    return error;\n  }\n};\n\nexport const getFarmers =\n  (queryParams = {}) =>\n  async (dispatch) => {\n    dispatch({ type: LOADING_FARMER });\n    queryParams = createQuery(queryParams);\n    // console.log(queryParams);\n    try {\n      const res = await axiosServices.get(`/farmers${queryParams}`);\n\n      if (res?.success && res?.result) {\n        dispatch({\n          type: GET_FARMERS_SUCCESS,\n          payload: res?.result?.data,\n        });\n      } else {\n        dispatch({\n          type: GET_FARMER_FAIL,\n        });\n      }\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: GET_FARMER_FAIL,\n      });\n      errorHandler(error);\n      return error;\n    }\n  };\n\nexport const getSingleFarmer = async (farmerId) => {\n  try {\n    const res = await axiosServices.get(`/farmers/${farmerId}`);\n    return res?.result;\n  } catch (error) {\n    console.log(error);\n    return error;\n  }\n};\n\nexport const addFarmer = (data) => async (dispatch) => {\n  try {\n    const res = await axiosServices.post(`/farmers`, data);\n\n    if (res?.success && res?.result) {\n      notify(\"Farmer added successfully\", { type: \"success\" });\n      dispatch({\n        type: ADD_FARMER_SUCCESS,\n        payload: res.result,\n      });\n      dispatch(getFarmers({ page: 1 }));\n    }\n    return res;\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: ADD_FARMER_FAIL,\n    });\n    errorHandler(error, \"Failed to add farmer\");\n    return error;\n  }\n};\n\nexport const updateFarmer = (farmerId, data) => async (dispatch) => {\n  try {\n    const res = await axiosServices.patch(`/farmers/${farmerId}`, data);\n\n    if (res?.success && res?.result) {\n      notify(\"Farmer updated successfully\", { type: \"success\" });\n    }\n    return res;\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to update farmer\");\n    return error;\n  }\n};\n\nexport const bulkUploadFarmers = (data) => async (dispatch) => {\n  try {\n    data = convertToFormData(data);\n    const res = await useAxiosService(\"formData\")({\n      method: \"post\",\n      url: `/farmers/bulk-upload`,\n      data,\n    });\n\n    if (res?.success && res?.result) {\n      notify(\"Farmers uploaded successfully\", { type: \"success\" });\n      dispatch(getFarmers({ page: 1 }));\n    }\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to add farmer\");\n    return error;\n  }\n};\n\n//\nexport const exportFarmerData = (data, navigate) => async (dispatch) => {\n  try {\n    const res = await axiosServices.post(\n      `/farmers/downloads/process-farmer-details`,\n      data\n    );\n\n    if (res?.success && res?.result) {\n      notify(\"Farmers exported successfully\", { type: \"success\" });\n      navigate(\"/user-management/farmers/exports\");\n    }\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to export farmers\");\n    return error;\n  }\n};\n\nexport const getFarmerExports = async () => {\n  try {\n    const res = await axiosServices.get(`/farmers/downloads`);\n\n    if (res?.success && res?.result) {\n      return res?.result?.data;\n    }\n\n    return res;\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to fetch exports\");\n    return error;\n  }\n};\n\nexport const downloadFarmerTemplate = (data) => async (dispatch) => {\n  try {\n    const res = await axiosServices.get(`/templates/farmers`);\n\n    if (res?.success && res?.result) {\n    } else {\n      dispatch({\n        type: GET_FARMER_FAIL,\n      });\n    }\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: GET_FARMER_FAIL,\n    });\n    errorHandler(error);\n    return error;\n  }\n};\n\n// SOURCING AGENTS\nexport const getSourcingAgents =\n  (queryParams = {}) =>\n  async (dispatch) => {\n    dispatch({ type: LOADING_SOURCING_AGENTS });\n    queryParams = createQuery(queryParams);\n    try {\n      const res = await axiosServices.get(`/sourcing-partners${queryParams}`);\n      dispatch({\n        type: GET_SOURCING_AGENTS_SUCCESS,\n        payload: res?.result?.sourcing_partners,\n      });\n\n      // console.log(\"first\", res?.result?.data);\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: GET_SOURCING_AGENTS_FAIL,\n      });\n      errorHandler(error, \"Failed to fetch sourcing agents\");\n      return error;\n    }\n  };\n\nexport const addSourcingAgent = (data) => async (dispatch) => {\n  // dispatch({ type: LOADING_SOURCING_AGENTS, payload: true });\n  try {\n    const res = await axiosServices.post(`/sourcing-partners`, data);\n    console.log(res);\n    if (res?.success && res?.result) {\n      notify(\"Sourcing agent added successfully\", { type: \"success\" });\n      dispatch({\n        type: ADD_SOURCING_AGENT_SUCCESS,\n        payload: res.result,\n      });\n      // dispatch(getUsers({ page: 1 }));\n    }\n    return res;\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: ADD_SOURCING_AGENT_FAIL,\n    });\n    errorHandler(error, \"Failed to add sourcing agent\");\n    return error;\n  }\n};\n\nexport const updateSourcingAgent = (userId, data) => async (dispatch) => {\n  // dispatch({ type: LOADING_SOURCING_AGENTS, payload: true });\n  try {\n    const res = await axiosServices.patch(`/users/${userId}`, data);\n\n    if (res?.success && res?.result) {\n      notify(\"Sourcing agent updated successfully\", { type: \"success\" });\n      // dispatch(getUsers({ page: 1 }));\n    }\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to update sourcing agent\");\n    return error;\n  }\n};\n\nexport const deleteSourcingAgent = (userId) => async (dispatch) => {\n  try {\n    const res = await axiosServices.delete(`/sourcing-partners/${userId}`);\n    if (res) {\n      notify(\"Sourcing agent deleted successfully\", { type: \"success\" });\n      dispatch(getSourcingAgents({ page: 1 }));\n    }\n  } catch (error) {\n    console.log(error);\n    errorHandler(error, \"Failed to delete sourcing agent\");\n    return error;\n  }\n};\n"],"names":["textFieldStyles","borderRadius","backgroundColor","width","md","xs","border","dialogContentStyles","minWidth","TableWithCheck","columns","data","isLoading","setSelectedRows","IndeterminateCheckbox","React","ref","indeterminate","rest","defaultRef","resolvedRef","current","type","useTable","useRowSelect","hooks","visibleColumns","push","id","Header","getToggleAllRowsSelectedProps","Cell","checkProps","row","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","selectedFlatRows","useEffect","map","d","original","className","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","scope","render","getRowProps","cells","cell","index","getCellProps","length","size","color","style","alignItems","height","viewBox","fill","xmlns","stroke","strokeOpacity","strokeWidth","strokeMiterlimit","props","sx","placeholder","value","p","borderColor","padding","Search","createSvgIcon","fillRule","clipRule","customStyles","content","top","left","right","bottom","marginRight","transform","setRow","modalIsOpen","setIsOpen","closeModal","dispatch","useDispatch","farmers","useSelector","state","UserManagementReducer","useState","page","limit","query","setQuery","status","queryRef","useRef","body","per_page","search_farmer_by_name","getFarmers","useMemo","accessor","textTransform","first_name","middle_name","charAt","toUpperCase","tableData","console","log","onClick","cursor","isOpen","onAfterOpen","onRequestClose","contentLabel","display","justifyContent","IconButton","CustomSearchField","InputProps","startAdornment","InputAdornment","position","fontSize","onChange","e","target","maxWidth","sm","maxHeight","loading","Button","margin","individual","setIndividual","bulk","setBulk","isAdding","setIsAdding","navigate","useNavigate","lga","season","initialSinglePayload","amount","farmerId","narration","destinationAccountNumber","destinationBankCode","bankCode","bank","tenantId","userId","singlePaymentPayload","setSinglePaymentPayload","bulkAmount","setBulkAmount","bulkNarration","setBulkNarration","dialogTextStyles","user_profile","JSON","parse","sessionStorage","getItem","handleSubmit","preventDefault","bank_code","farmer_id","tenant_id","user_id","axiosServices","res","toast","response","error","handleBulkSubmit","newData","item","account_no","reference","Math","random","toString","substring","Date","valueOf","currency","last_name","title","transactionList","filters","breadcrumbs","Typography","Link","href","Box","gap","background","boxShadow","textAlign","Stack","direction","px","py","onSubmit","flexWrap","lg","mx","htmlFor","TextField","name","select","required","forEach","farmer","Spinner","option","MenuItem","disabled","marginTop","minHeight","overflowY","Chip","label","convertToFormData","bodyFormData","FormData","Object","keys","key","append","getUsers","queryParams","createQuery","LOADING_USERS","GET_USERS_SUCCESS","payload","GET_USERS_FAIL","errorHandler","addUser","success","result","notify","ADD_USER_SUCCESS","ADD_USER_FAIL","bulkUploadUsers","useAxiosService","post","updateUser","deleteUser","LOADING_FARMER","GET_FARMERS_SUCCESS","GET_FARMER_FAIL","getSingleFarmer","addFarmer","ADD_FARMER_SUCCESS","ADD_FARMER_FAIL","updateFarmer","bulkUploadFarmers","method","url","exportFarmerData","getFarmerExports","getSourcingAgents","LOADING_SOURCING_AGENTS","GET_SOURCING_AGENTS_SUCCESS","sourcing_partners","GET_SOURCING_AGENTS_FAIL","addSourcingAgent","ADD_SOURCING_AGENT_SUCCESS","ADD_SOURCING_AGENT_FAIL","deleteSourcingAgent"],"sourceRoot":""}